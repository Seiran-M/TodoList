{"version":3,"sources":["api/tasks-api.ts","state/reducers/tasks-reducer.ts","api/auth-api.ts","utils/error-utils.ts","state/reducers/auth-reducer.ts","state/reducers/app-reducer.ts","api/todolists-api.ts","state/reducers/todolists-reducer.ts","state/store.ts","serviceWorker.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/login/Login.tsx","app/App.tsx","index.tsx","app/App.module.css","features/TodolistsList/Todolist/Todolist.module.css"],"names":["TaskStatuses","TaskPriorities","ResponseCode","instance","axios","create","baseURL","withCredentials","headers","authAPI","data","post","get","delete","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","loginTC","createAsyncThunk","param","rejectWithValue","response","resultCode","success","errors","fieldsErrors","undefined","logoutTC","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","initializeAppTC","isInitialized","appReducer","todolistsAPI","title","todolistId","put","fetchTodolistsTC","todolists","addTodolistTC","todolist","item","removeTodolistTC","todolistsId","changeTodolistEntityStatusAC","id","entityStatus","changeTodolistTitleTC","changeTodolistFilterAC","index","findIndex","tl","filter","map","unshift","splice","todolistsReducer","tasksAPI","taskTitle","taskId","model","fetchTasksTC","tasks","items","deleteTaskTC","changeTaskEntityStatusAC","addTaskTC","task","updateTaskTC","getState","find","t","apiModel","startDate","priority","description","deadline","forEach","todoListId","tasksReducer","rootReducer","combineReducers","auth","app","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","Boolean","window","location","hostname","match","AddItemForm","React","memo","props","disabled","useState","setTitle","setError","addItem","trim","e","currentTarget","key","EditableSpan","onChange","console","log","editMode","setEditMode","Task","removeTask","changeTaskTitle","changeTaskStatus","onRemoveHandler","useCallback","onChangeStatusHandler","newIsDoneValue","checked","Completed","New","onChangeTitleHandler","newValue","Todolist","demo","changeFilter","useDispatch","useEffect","addTask","changeTodolistTitle","newTitle","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","IconButton","onClick","removeTodolist","size","aria-label","Delete","className","styles","filterButtons","Button","variant","color","TodolistsList","useSelector","addTodolist","newFilterValue","margin","padding","Alert","ErrorSnackbar","handleClose","event","reason","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","rejected","setFieldError","field","resetForm","handleSubmit","getFieldProps","touched","App","AppBar","position","Toolbar","toolbar","edge","Menu","Typography","typography","button","LinearProgress","Container","fixed","exact","path","render","from","to","style","top","textAlign","width","CircularProgress","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.740008ab.chunk.js","sourcesContent":["import axios from 'axios'\rimport {RequestStatusType} from '../state/reducers/app-reducer'\r\rconst instance = axios.create({\r   baseURL: 'https://social-network.samuraijs.com/api/1.1/todo-lists/',\r   withCredentials: true,\r   headers: {'API-KEY': '85f20b48-f9ce-40aa-b7ca-82ca81a13c9b'}\r})\r\r// API\rexport const tasksAPI = {\r   getTasks(todolistId: string) {\r      return instance.get<GetTasksResponse>(`${todolistId}/tasks`)\r   },\r   createTask(todolistId: string, taskTitle: string) {\r      return instance.post<ResponseType<{ item: TaskType }>>(`${todolistId}/tasks`, {title: taskTitle})\r   },\r   updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r      return instance.put<ResponseType<TaskType>>(`${todolistId}/tasks/${taskId}`, model)\r   },\r   deleteTask(todolistId: string, taskId: string) {\r      return instance.delete<ResponseType>(`${todolistId}/tasks/${taskId}`)\r   }\r}\r\r// enums\rexport enum TaskStatuses {\r   New = 0,\r   InProgress = 1,\r   Completed = 2,\r   Draft = 3\r}\r\rexport enum TaskPriorities {\r   Low = 0,\r   Middle = 1,\r   Hi = 2,\r   Urgently = 3,\r   Later = 4\r}\r\r// types\rexport type TaskType = {\r   description: string\r   title: string\r   status: TaskStatuses\r   priority: TaskPriorities\r   startDate: string\r   deadline: string\r   id: string\r   todoListId: string\r   order: number\r   addedDate: string\r   entityStatus: RequestStatusType\r}\rexport type UpdateTaskModelType = {\r   title: string\r   description: string\r   status: TaskStatuses\r   priority: TaskPriorities\r   startDate: string\r   deadline: string\r}\rtype GetTasksResponse = {\r   error: string | null\r   totalCount: number\r   items: TaskType[]\r}\rexport type ResponseType<D = {}> = {\r   resultCode: number\r   messages: Array<string>\r   data: D\r}\r","import {AxiosError} from 'axios'\rimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\rimport {AppRootStateType} from '../store'\rimport {RequestStatusType, setAppStatusAC} from './app-reducer'\rimport {addTodolistTC, fetchTodolistsTC, removeTodolistTC, TasksStateType} from './todolists-reducer'\rimport {TaskPriorities, tasksAPI, TaskStatuses, UpdateTaskModelType} from '../../api/tasks-api'\rimport {TodolistType} from '../../api/todolists-api'\rimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\r// enums\rexport enum ResponseCode {\r   success = 0,\r   failed = 1,\r   captcha = 10\r}\r\r// thunks\rexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasks',\r   async (todolistId: string, {dispatch}) => {\r      dispatch(setAppStatusAC({status: 'loading'}))\r      const response = await tasksAPI.getTasks(todolistId)\r      const tasks = response.data.items\r      dispatch(setAppStatusAC({status: 'succeeded'}))\r      return {tasks, todolistId}\r   })\rexport const deleteTaskTC = createAsyncThunk('tasks/deleteTasks',\r   async (param: { todolistId: string, taskId: string }, {dispatch}) => {\r      dispatch(setAppStatusAC({status: 'loading'}))\r      dispatch(changeTaskEntityStatusAC({\r         taskId: param.taskId, entityStatus: 'loading',\r         todolistId: param.todolistId\r      }))\r      await tasksAPI.deleteTask(param.todolistId, param.taskId)\r      dispatch(setAppStatusAC({status: 'succeeded'}))\r      return {todolistId: param.todolistId, taskId: param.taskId}\r   })\rexport const addTaskTC = createAsyncThunk('task/addTask',\r   async (param: { todolistId: string, title: string }, {dispatch, rejectWithValue}) => {\r      dispatch(setAppStatusAC({status: 'loading'}))\r      try {\r         const response = await tasksAPI.createTask(param.todolistId, param.title)\r         if (response.data.resultCode === ResponseCode.success) {\r            const task = response.data.data.item\r            dispatch(setAppStatusAC({status: 'succeeded'}))\r            return task\r         } else {\r            handleServerAppError(response.data, dispatch)\r            return rejectWithValue(null)\r         }\r      } catch (err) {\r         const error: AxiosError = err\r         handleServerNetworkError(error.message, dispatch)\r         return rejectWithValue(null)\r      }\r   })\rexport const updateTaskTC = createAsyncThunk('tasks/updateTask',\r   async (param: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string }, {\r      dispatch,\r      rejectWithValue,\r      getState\r   }) => {\r      const state = getState() as AppRootStateType\r      const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r      if (!task) {\r         return rejectWithValue('task not found in the state')\r      }\r      const apiModel: UpdateTaskModelType = {\r         title: task.title,\r         startDate: task.startDate,\r         priority: task.priority,\r         description: task.description,\r         deadline: task.deadline,\r         status: task.status,\r         ...param.model\r      }\r      try {\r         dispatch(setAppStatusAC({status: 'loading'}))\r         dispatch(changeTaskEntityStatusAC({\r            taskId: param.taskId,\r            entityStatus: 'loading',\r            todolistId: param.todolistId\r         }))\r         const response = await tasksAPI.updateTask(param.todolistId, param.taskId, apiModel)\r         if (response.data.resultCode === ResponseCode.success) {\r            dispatch(setAppStatusAC({status: 'succeeded'}))\r            dispatch(changeTaskEntityStatusAC({\r               taskId: param.taskId,\r               entityStatus: 'idle',\r               todolistId: param.todolistId\r            }))\r            return param\r         } else {\r            handleServerAppError(response.data, dispatch)\r            return rejectWithValue(null)\r         }\r      } catch (err) {\r         const error: AxiosError = err\r         handleServerNetworkError(error.message, dispatch)\r         return rejectWithValue(null)\r      }\r   })\r\r\rconst slice = createSlice({\r   name: 'tasks',\r   initialState: {} as TasksStateType,\r   reducers: {\r      changeTaskEntityStatusAC(state, action: PayloadAction<{ taskId: string, entityStatus: RequestStatusType, todolistId: string }>) {\r         return {\r            ...state, [action.payload.todolistId]: state[action.payload.todolistId]\r               .map((t) => t.id === action.payload.taskId ? {...t, entityStatus: action.payload.entityStatus} : t)\r         }\r      },\r   },\r   extraReducers: builder => {\r      builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r         state[action.payload.todolist.id] = []\r      })\r      builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r         delete state[action.payload.id]\r      })\r      builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r         action.payload.todolists.forEach((tl: TodolistType) => {\r            state[tl.id] = []\r         })\r      })\r      builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r         state[action.payload.todolistId] = action.payload.tasks\r      })\r      builder.addCase(deleteTaskTC.fulfilled, (state, action) => {\r         const tasks = state[action.payload.todolistId]\r         const index = tasks.findIndex(t => t.id === action.payload.taskId)\r         if (index > -1) {\r            tasks.splice(index, 1)\r         }\r      })\r      builder.addCase(addTaskTC.fulfilled, (state, action) => {\r         state[action.payload.todoListId].unshift(action.payload)\r      })\r      builder.addCase(updateTaskTC.fulfilled, (state, action) => {\r         const tasks = state[action.payload.todolistId]\r         if (tasks) {\r            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r            if (index > -1) {\r               tasks[index] = {...tasks[index], ...action.payload.model}\r            }\r         }\r      })\r   }\r})\r\rexport const tasksReducer = slice.reducer\rexport const {changeTaskEntityStatusAC} = slice.actions\r\r\r// thunks\r\r// export const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r//    dispatch(setAppStatusAC({status: 'loading'}))\r//    tasksAPI.getTasks(todolistId)\r//       .then((res) => {\r//          const tasks = res.data.items\r//          dispatch(setTasksAC({tasks, todolistId}))\r//          dispatch(setAppStatusAC({status: 'succeeded'}))\r//       })\r//       .catch((error: AxiosError) => {\r//          handleServerNetworkError(error.message, dispatch)\r//       })\r// }\r\r// export const deleteTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch) => {\r//    dispatch(setAppStatusAC({status: 'loading'}))\r//    dispatch(changeTaskEntityStatusAC({taskId, entityStatus: 'loading', todolistId}))\r//    tasksAPI.deleteTask(todolistId, taskId)\r//       .then(() => {\r//          const action = removeTaskAC({todolistId, taskId})\r//          dispatch(action)\r//          dispatch(setAppStatusAC({status: 'succeeded'}))\r//       })\r//       .catch((error: AxiosError) => {\r//          handleServerNetworkError(error.message, dispatch)\r//       })\r// }\r\r// export const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r//    dispatch(setAppStatusAC({status: 'loading'}))\r//    tasksAPI.createTask(todolistId, title)\r//       .then(res => {\r//          if (res.data.resultCode === ResponseCode.success) {\r//             const task = res.data.data.item\r//             dispatch(addTaskAC(task))\r//             dispatch(setAppStatusAC({status: 'succeeded'}))\r//          } else {\r//             handleServerAppError(res.data, dispatch)\r//          }\r//       })\r//       .catch((error: AxiosError) => {\r//          handleServerNetworkError(error.message, dispatch)\r//       })\r// }\r\r// export const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r//    const state = getState()\r//    const task = state.tasks[todolistId].find(t => t.id === taskId)\r//    if (!task) {\r//       console.warn('task not found in the state')\r//       return\r//    }\r//    const apiModel: UpdateTaskModelType = {\r//       title: task.title,\r//       startDate: task.startDate,\r//       priority: task.priority,\r//       description: task.description,\r//       deadline: task.deadline,\r//       status: task.status,\r//       ...domainModel\r//    }\r//    dispatch(setAppStatusAC({status: 'loading'}))\r//    dispatch(changeTaskEntityStatusAC({taskId, entityStatus: 'loading', todolistId}))\r//    tasksAPI.updateTask(todolistId, taskId, apiModel)\r//       .then(() => {\r//          dispatch(updateTaskAC({taskId, model: domainModel, todolistId}))\r//          dispatch(setAppStatusAC({status: 'succeeded'}))\r//          dispatch(changeTaskEntityStatusAC({taskId, entityStatus: 'idle', todolistId}))\r//       })\r//       .catch((error: AxiosError) => {\r//          handleServerNetworkError(error.message, dispatch)\r//       })\r// }\r\r// types\rtype UpdateDomainTaskModelType = {\r   title?: string\r   description?: string\r   status?: TaskStatuses\r   priority?: TaskPriorities\r   startDate?: string\r   deadline?: string\r}\r\r\r","import axios from 'axios'\r\rconst instance = axios.create({\r   baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r   withCredentials: true,\r   headers: {'API-KEY': '85f20b48-f9ce-40aa-b7ca-82ca81a13c9b'}\r})\r\r// API\rexport const authAPI = {\r   login(data: LoginParamsType) {\r      return instance.post<ResponseType<{ userId?: number }>>('auth/login', data)\r   },\r   me() {\r      return instance.get<ResponseType<MeResponseType>>('auth/me')\r   },\r   logout() {\r      return instance.delete<ResponseType>('auth/login')\r   }\r}\r\r// types\rexport type FieldErrorType = { field: string; error: string }\r\rtype ResponseType<D = {}> = {\r   resultCode: number\r   messages: Array<string>\r   fieldsErrors?: Array<FieldErrorType>\r   data: D\r}\rexport type LoginParamsType = {\r   email: string\r   password: string\r   rememberMe: boolean\r   captcha?: boolean\r}\rexport type MeResponseType = {\r   id: number\r   email: string\r   login: string\r}\r","import {Dispatch} from 'redux'\r\rimport {setAppErrorAC, setAppStatusAC} from '../state/reducers/app-reducer'\rimport {ResponseType} from '../api/tasks-api'\r\r// generic function\rexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r   if (data.messages.length) {\r      dispatch(setAppErrorAC({error: data.messages[0]}))\r   } else {\r      dispatch(setAppErrorAC({error: 'Some error occurred'}))\r   }\r   dispatch(setAppStatusAC({status: 'failed'}))\r}\r\rexport const handleServerNetworkError = (message: string, dispatch: ErrorUtilsDispatchType) => {\r   dispatch(setAppErrorAC({error: message}))\r   dispatch(setAppStatusAC({status: 'failed'}))\r}\r\r// types\rtype ErrorUtilsDispatchType = Dispatch<ReturnType<typeof setAppErrorAC> | ReturnType<typeof setAppStatusAC>>","import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\rimport {authAPI, FieldErrorType, LoginParamsType} from '../../api/auth-api'\rimport {setAppStatusAC} from './app-reducer'\rimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\rimport {AxiosError} from 'axios'\rimport {ResponseCode} from './tasks-reducer'\r\r\r\r\r//thunks\rexport const loginTC = createAsyncThunk<undefined, LoginParamsType, { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> } }>\r('auth/login', async (param, {dispatch, rejectWithValue}) => {\r   dispatch(setAppStatusAC({status: 'loading'}))\r   try {\r      const response = await authAPI.login(param)\r      if (response.data.resultCode === ResponseCode.success) {\r         dispatch(setAppStatusAC({status: 'succeeded'}))\r         return\r      } else {\r         handleServerAppError(response.data, dispatch)\r         return rejectWithValue({errors: response.data.messages, fieldsErrors: response.data.fieldsErrors})\r      }\r   } catch (err) {\r      const error: AxiosError = err\r      handleServerNetworkError(error.message, dispatch)\r      return rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r   }\r})\rexport const logoutTC = createAsyncThunk('auth/logout', async (param, {dispatch, rejectWithValue}) => {\r   dispatch(setAppStatusAC({status: 'loading'}))\r   try {\r      const response = await authAPI.logout()\r      if (response.data.resultCode === ResponseCode.success) {\r         dispatch(setAppStatusAC({status: 'succeeded'}))\r         return\r      } else {\r         handleServerAppError(response.data, dispatch)\r         return rejectWithValue({errors: response.data.messages, fieldsErrors: response.data.fieldsErrors})\r      }\r   } catch (error) {\r      handleServerNetworkError(error.message, dispatch)\r      return rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r   }\r})\r\r\rconst slice = createSlice({\r   name: 'auth',\r   initialState: {\r      isLoggedIn: false\r   },\r   reducers: {\r      setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r         state.isLoggedIn = action.payload.value\r      }\r   },\r   extraReducers: builder => {\r      builder.addCase(loginTC.fulfilled, (state) => {\r         state.isLoggedIn = true\r      })\r      builder.addCase(logoutTC.fulfilled, (state) => {\r         state.isLoggedIn = false\r      })\r   }\r})\r\rexport const authReducer = slice.reducer\rexport const {setIsLoggedInAC} = slice.actions\r","import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\rimport {authAPI} from '../../api/auth-api'\rimport {setIsLoggedInAC} from './auth-reducer'\rimport {handleServerAppError} from '../../utils/error-utils'\rimport {ResponseCode} from './tasks-reducer'\r\r// thunks\rexport const initializeAppTC = createAsyncThunk('app/initializeApp', async (param, {dispatch}) => {\r   const response = await authAPI.me()\r   if (response.data.resultCode === ResponseCode.success) {\r      dispatch(setIsLoggedInAC({value: true}))\r   } else {\r      handleServerAppError(response.data, dispatch)\r   }\r})\r\rconst slice = createSlice({\r   name: 'app',\r   initialState: {\r      status: 'idle' as RequestStatusType,\r      error: null as ErrorType,\r      isInitialized: false\r   } as InitialStateType,\r   reducers: {\r      setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r         state.status = action.payload.status\r      },\r      setAppErrorAC(state, action: PayloadAction<{ error: null | string }>) {\r         state.error = action.payload.error\r      }\r   },\r   extraReducers: builder => {\r      builder.addCase(initializeAppTC.fulfilled, (state) => {\r         state.isInitialized = true\r      })\r   }\r})\r\rexport const appReducer = slice.reducer\rexport const {setAppStatusAC, setAppErrorAC} = slice.actions\r\r//\r// export const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r//    switch (action.type) {\r//       case ACTIONS_TYPE.SET_STATUS:\r//          return {...state, status: action.status}\r//       case ACTIONS_TYPE.SET_ERROR:\r//          return {...state, error: action.error}\r//       case ACTIONS_TYPE.SET_IS_INITIALIZED:\r//          return {...state, isInitialized: action.isInitialized}\r//       default:\r//          return state\r//    }\r// }\r// actions\r// export const setAppStatusAC = (status: RequestStatusType) => ({type: ACTIONS_TYPE.SET_STATUS, status} as const)\r// export const setAppErrorAC = (error: null | string) => ({type: ACTIONS_TYPE.SET_ERROR, error} as const)\r// export const setIsInitializedAC = (isInitialized: boolean) => ({\r//    type: ACTIONS_TYPE.SET_IS_INITIALIZED,\r//    isInitialized\r// } as const)\r\r// types\rexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\rexport type ErrorType = string | null\rexport type InitialStateType = {\r   status: RequestStatusType\r   error: ErrorType\r   isInitialized: boolean\r}","import axios from 'axios'\r\rconst instance = axios.create({\r   baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r   withCredentials: true,\r   headers: {'API-KEY': '85f20b48-f9ce-40aa-b7ca-82ca81a13c9b'}\r})\r\r// API\rexport const todolistsAPI = {\r   getTodolists() {\r      return instance.get<Array<TodolistType>>('todo-lists')\r   },\r   createTodolist(title: string) {\r      return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title})\r   },\r   deleteTodolist(todolistId: string) {\r      return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r   },\r   updateTodolist(todolistId: string, title: string) {\r      return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r   }\r}\r\r// types\rexport type TodolistType = {\r   id: string\r   addedDate: string\r   order: number\r   title: string\r}\rtype ResponseType<D = {}> = {\r   resultCode: number\r   messages: Array<string>\r   data: D\r}","import {AxiosError} from 'axios'\rimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\rimport {todolistsAPI, TodolistType} from '../../api/todolists-api'\rimport {TaskType} from '../../api/tasks-api'\rimport {RequestStatusType, setAppStatusAC} from './app-reducer'\rimport {ResponseCode} from './tasks-reducer'\rimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\r//thunks\rexport const fetchTodolistsTC = createAsyncThunk('todolists/fetchTodolists',\r   async (param, {dispatch, rejectWithValue}) => {\r      dispatch(setAppStatusAC({status: 'loading'}))\r      const response = await todolistsAPI.getTodolists()\r      try {\r         dispatch(setAppStatusAC({status: 'succeeded'}))\r         return {todolists: response.data}\r      } catch (err) {\r         const error: AxiosError = err\r         handleServerNetworkError(error.message, dispatch)\r         return rejectWithValue(null)\r      }\r   })\rexport const addTodolistTC = createAsyncThunk('todolists/addTodolist',\r   async (title: string, {dispatch, rejectWithValue}) => {\r      dispatch(setAppStatusAC({status: 'loading'}))\r      const response = await todolistsAPI.createTodolist(title)\r      try {\r         if (response.data.resultCode === ResponseCode.success) {\r            dispatch(setAppStatusAC({status: 'succeeded'}))\r            return {todolist: response.data.data.item}\r         } else {\r            handleServerAppError(response.data, dispatch)\r            return rejectWithValue(null)\r         }\r      } catch (err) {\r         const error: AxiosError = err\r         handleServerNetworkError(error.message, dispatch)\r         return rejectWithValue(null)\r      }\r   })\rexport const removeTodolistTC = createAsyncThunk('todolists/removeTodolist',\r   async (todolistsId: string, {dispatch, rejectWithValue}) => {\r      dispatch(setAppStatusAC({status: 'loading'}))\r      dispatch(changeTodolistEntityStatusAC({id: todolistsId, entityStatus: 'loading'}))\r      const response = await todolistsAPI.deleteTodolist(todolistsId)\r      try {\r         if (response.data.resultCode === ResponseCode.success) {\r            dispatch(setAppStatusAC({status: 'succeeded'}))\r            return {id: todolistsId}\r         } else {\r            handleServerAppError(response.data, dispatch)\r            return rejectWithValue(null)\r         }\r      } catch (err) {\r         const error: AxiosError = err\r         handleServerNetworkError(error.message, dispatch)\r         return rejectWithValue(null)\r      }\r   })\rexport const changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle',\r   async (param: { todolistId: string, title: string }, {dispatch, rejectWithValue}) => {\r      dispatch(setAppStatusAC({status: 'loading'}))\r      const response = await todolistsAPI.updateTodolist(param.todolistId, param.title)\r      try {\r         if (response.data.resultCode === ResponseCode.success) {\r            dispatch(setAppStatusAC({status: 'succeeded'}))\r            return {id: param.todolistId, title: param.title}\r         } else {\r            handleServerAppError(response.data, dispatch)\r            return rejectWithValue(null)\r         }\r      } catch (err) {\r         const error: AxiosError = err\r         handleServerNetworkError(error.message, dispatch)\r         return rejectWithValue(null)\r      }\r   })\r\r\rconst slice = createSlice({\r   name: 'todolists',\r   initialState: [] as Array<TodolistDomainType>,\r   reducers: {\r      changeTodolistFilterAC(state, action: PayloadAction<{ filter: FilterValuesType, id: string }>) {\r         const index = state.findIndex(tl => tl.id === action.payload.id)\r         state[index].filter = action.payload.filter\r      },\r      changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, entityStatus: RequestStatusType }>) {\r         const index = state.findIndex(tl => tl.id === action.payload.id)\r         state[index].entityStatus = action.payload.entityStatus\r      }\r   },\r   extraReducers: builder => {\r      builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r         return action.payload.todolists.map((tl: TodolistType) => ({...tl, entityStatus: 'idle', filter: 'all'}))\r      })\r      builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r         state.unshift({...action.payload.todolist, entityStatus: 'idle', filter: 'all'})\r      })\r      builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r         const index = state.findIndex(tl => tl.id === action.payload.id)\r         if (index > 1) {\r            state.splice(index, 1)\r         }\r      })\r      builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r         const index = state.findIndex(tl => tl.id === action.payload.id)\r         state[index].title = action.payload.title\r      })\r   }\r})\r\rexport const todolistsReducer = slice.reducer\rexport const {changeTodolistEntityStatusAC, changeTodolistFilterAC} = slice.actions\r\r// types\rexport type TasksStateType = { [key: string]: Array<TaskType> }\rexport type FilterValuesType = 'all' | 'active' | 'completed'\rexport type TodolistDomainType = TodolistType & {\r   filter: FilterValuesType\r   entityStatus: RequestStatusType\r}\r","import {combineReducers} from 'redux'\rimport {configureStore} from '@reduxjs/toolkit'\r\rimport {tasksReducer} from './reducers/tasks-reducer'\rimport {todolistsReducer} from './reducers/todolists-reducer'\rimport {authReducer} from './reducers/auth-reducer'\rimport {appReducer} from './reducers/app-reducer'\rimport thunkMiddleware from 'redux-thunk'\rimport {useDispatch} from 'react-redux'\r\r\rconst rootReducer = combineReducers({\r   tasks: tasksReducer,\r   todolists: todolistsReducer,\r   auth: authReducer,\r   app: appReducer\r})\r\rexport const store = configureStore({\r   reducer: rootReducer,\r   middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r})\r\rexport type RootReducerType = typeof rootReducer\rexport type AppRootStateType = ReturnType<RootReducerType>\rtype AppDispatchType = typeof store.dispatch\r\rexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\r","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\rimport {IconButton, TextField} from '@material-ui/core'\rimport {AddBox} from '@material-ui/icons'\r\rexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r   const {disabled} = props\r\r   const [title, setTitle] = useState('')\r   const [error, setError] = useState<string | null>(null)\r\r   const changeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\r   const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r      if (error !== null) {\r         setError(null)\r      }\r      if (e.key === 'Enter') {\r         addItem()\r      }\r   }\r\r   const addItem = () => {\r      if (title.trim() !== '') {\r         props.addItem(title)\r         setTitle('')\r      } else {\r         setError('Title is required')\r      }\r   }\r\r   return (\r      <div>\r         <TextField\r            value={title}\r            variant={'outlined'}\r            size={'small'}\r            label={'Type value'}\r            helperText={error && 'Title is required!'}\r            onChange={changeTitle}\r            onKeyPress={onKeyPressHandler}\r            error={!!error}\r            onBlur={() => setError(null)}\r            disabled={disabled}\r         />\r         <IconButton\r            onClick={addItem}\r            disabled={disabled}\r            color=\"primary\"\r            size=\"small\"\r         >\r            <AddBox/>\r         </IconButton>\r      </div>\r   )\r})\r\r// types\rexport type AddItemFormPropsType = {\r   addItem: (title: string) => void\r   disabled?: boolean\r}\r","import React, {ChangeEvent, useState} from 'react'\rimport {TextField} from '@material-ui/core'\r\rexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r   const {disabled, onChange} = props\r\r   console.log('EditableSpan')\r\r   const [editMode, setEditMode] = useState(false)\r   const [title, setTitle] = useState('')\r\r   const onEditMode = () => {\r      setEditMode(true)\r      setTitle(props.title)\r   }\r   const offEditMode = () => {\r      setEditMode(false)\r      onChange(title)\r   }\r\r   const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\r   return (\r      editMode\r         ? <TextField\r            value={title}\r            onChange={onChangeTitle}\r            onBlur={offEditMode}\r            disabled={disabled}\r            autoFocus\r         />\r         : <span onDoubleClick={onEditMode}>{props.title}</span>\r   )\r})\r\r// types\rtype EditableSpanPropsType = {\r   title: string\r   onChange: (newValue: string) => void\r   disabled?: boolean\r}","import React, {ChangeEvent, useCallback} from 'react'\rimport {Checkbox, IconButton} from '@material-ui/core'\rimport {Delete} from '@material-ui/icons'\r\rimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\rimport {TaskStatuses, TaskType} from '../../../../api/tasks-api'\rimport {RequestStatusType} from '../../../../state/reducers/app-reducer'\r\rexport const Task = React.memo((props: TaskPropsType) => {\r   const {task, todolistId, removeTask, changeTaskTitle, changeTaskStatus, entityStatus} = props\r\r   const onRemoveHandler = useCallback(() => removeTask(todolistId, task.id), [todolistId, task.id])\r\r   const onChangeStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r      let newIsDoneValue = e.currentTarget.checked\r      changeTaskStatus(task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, todolistId)\r   }, [task.id, todolistId])\r\r   const onChangeTitleHandler = useCallback((newValue: string) => {\r      changeTaskTitle(task.id, newValue, todolistId)\r   }, [changeTaskTitle, task.id, todolistId])\r\r   return (\r      <div className={TaskStatuses.Completed ? 'is-done' : ''} key={task.id}>\r         <Checkbox color=\"primary\" checked={task.status === TaskStatuses.Completed} onChange={onChangeStatusHandler} disabled={entityStatus === 'loading'}/>\r         <EditableSpan title={task.title} onChange={onChangeTitleHandler} disabled={entityStatus === 'loading'}/>\r         <IconButton onClick={onRemoveHandler} disabled={entityStatus === 'loading'} size=\"small\" aria-label=\"delete\">\r            <Delete/>\r         </IconButton>\r      </div>\r   )\r})\r\r// types\rtype TaskPropsType = {\r   todolistId: string\r   task: TaskType\r   removeTask: (todolistId: string, taskId: string) => void\r   changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r   changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r   entityStatus: RequestStatusType\r}","import React, {useCallback, useEffect} from 'react'\nimport {useDispatch} from 'react-redux'\nimport {Button, IconButton} from '@material-ui/core'\nimport {Delete} from '@material-ui/icons'\n\nimport styles from './Todolist.module.css'\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\nimport {Task} from './Task/Task'\nimport {fetchTasksTC} from '../../../state/reducers/tasks-reducer'\nimport {RequestStatusType} from '../../../state/reducers/app-reducer'\nimport {TaskStatuses, TaskType} from '../../../api/tasks-api'\n\n\nexport const Todolist = React.memo((props: TodolistPropsType) => {\n   const {\n      demo,\n      tasks,\n      title,\n      id,\n      filter,\n      changeFilter,\n      removeTask,\n      changeTaskStatus,\n      changeTaskTitle,\n      entityStatus\n   } = props\n\n   const dispatch = useDispatch()\n\n   useEffect(() => {\n      if (demo) return\n      const todolistId = id\n      dispatch(fetchTasksTC(todolistId))\n   }, [])\n\n\n   const removeTodolist = () => {props.removeTodolist(id)}\n   const addTask = useCallback((title: string) => {props.addTask(title, id)}, [props, id])\n   const changeTodolistTitle = useCallback((newTitle: string) => {props.changeTodolistTitle(id, newTitle)}, [id, props.changeTodolistTitle])\n\n   const onAllClickHandler = useCallback(() => changeFilter('all', id), [changeFilter, id])\n   const onActiveClickHandler = useCallback(() => changeFilter('active', id), [changeFilter, id])\n   const onCompletedClickHandler = useCallback(() => changeFilter('completed', id), [changeFilter, id])\n\n   let tasksForTodolist = tasks\n\n   if (filter === 'active') {\n      tasksForTodolist = tasks.filter(task => task.status === TaskStatuses.New)\n   }\n   if (filter === 'completed') {\n      tasksForTodolist = tasks.filter(task => task.status === TaskStatuses.Completed)\n   }\n\n//    let tasksForTodolist = useMemo(() => {\n//       if (filter === \"active\") {\n//          return tasks.filter((task) => task.status === TaskStatuses.New);\n//       }\n//       if (filter === \"completed\") {\n//          return tasks.filter((task) => task.status === TaskStatuses.Completed);\n//       }\n//    return tasksForTodolist;\n// }, [filter, tasks]);\n\n   return (\n      <>\n         <h3>\n            <EditableSpan\n               title={title}\n               onChange={changeTodolistTitle}\n               disabled={entityStatus === 'loading'}\n            />\n            <IconButton\n               onClick={removeTodolist}\n               disabled={entityStatus === 'loading'}\n               size=\"small\"\n               aria-label=\"delete\"\n            >\n               <Delete/>\n            </IconButton>\n         </h3>\n\n         <AddItemForm\n            addItem={addTask}\n            disabled={entityStatus === 'loading'}\n         />\n\n         <div>\n            {\n               tasksForTodolist.map(task => <Task\n                  todolistId={id}\n                  task={task}\n                  entityStatus={task.entityStatus}\n                  removeTask={removeTask}\n                  changeTaskStatus={changeTaskStatus}\n                  changeTaskTitle={changeTaskTitle}\n                  key={task.id}/>)\n            }\n         </div>\n\n         <div className={styles.filterButtons}>\n            <Button\n               size=\"small\"\n               variant={filter === 'all' ? 'contained' : 'text'}\n               onClick={onAllClickHandler}>All\n            </Button>\n            <Button\n               color={'primary'}\n               size=\"small\"\n               variant={filter === 'active' ? 'contained' : 'text'}\n               onClick={onActiveClickHandler}>Active\n            </Button>\n            <Button\n               color={'secondary'}\n               size=\"small\"\n               variant={filter === 'completed' ? 'contained' : 'text'}\n               onClick={onCompletedClickHandler}>Completed\n            </Button>\n         </div>\n      </>\n   )\n})\n\n\n// types\nexport type FilterValuesType = 'all' | 'active' | 'completed'\ntype TodolistPropsType = {\n   demo?: boolean,\n   title: string\n   id: string\n   tasks: Array<TaskType>\n   filter: FilterValuesType\n   changeFilter: (newFilterValue: FilterValuesType, todolistID: string) => void\n   removeTodolist: (todolistID: string) => void\n   changeTodolistTitle: (todolistID: string, newTitle: string) => void\n   removeTask: (todolistID: string, taskId: string) => void\n   addTask: (taskTitle: string, todolistId: string) => void\n   changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n   changeTaskTitle: (taskID: string, newTitle: string, todolistID: string) => void\n   entityStatus: RequestStatusType\n}","import React, {useCallback, useEffect} from 'react'\rimport {useDispatch, useSelector} from 'react-redux'\rimport {Redirect} from 'react-router-dom'\rimport {Grid, Paper} from '@material-ui/core'\r\rimport {AppRootStateType} from '../../state/store'\rimport {\r   addTodolistTC,\r   changeTodolistFilterAC,\r   changeTodolistTitleTC,\r   fetchTodolistsTC,\r   removeTodolistTC,\r   TasksStateType,\r   TodolistDomainType\r} from '../../state/reducers/todolists-reducer'\rimport {FilterValuesType} from '../../state/reducers/todolist-reducer.test'\rimport {addTaskTC, deleteTaskTC, updateTaskTC} from '../../state/reducers/tasks-reducer'\rimport {TaskStatuses} from '../../api/tasks-api'\rimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\rimport {Todolist} from './Todolist/Todolist'\r\r\rexport const TodolistsList: React.FC<TodolistsListT> = (props) => {\r   const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r   const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r   const isLoggedIn = useSelector<AppRootStateType>((state) => state.auth.isLoggedIn)\r\r   const dispatch = useDispatch()\r\r   useEffect(() => {\r      if (!isLoggedIn) {\r         return\r      }\r      dispatch(fetchTodolistsTC())\r   }, [dispatch, isLoggedIn])\r\r   // Functions for todolist:\r   const addTodolist = useCallback((title: string) => {\r      dispatch(addTodolistTC(title))\r   }, [dispatch])\r   const removeTodolist = useCallback((todolistId: string) => {\r      dispatch(removeTodolistTC(todolistId))\r   }, [dispatch])\r   const changeFilter = useCallback((newFilterValue: FilterValuesType, todolistId: string) => {\r      dispatch(changeTodolistFilterAC({filter: newFilterValue, id: todolistId}))\r   }, [dispatch])\r   const changeTodolistTitle = useCallback((todolistId: string, newTitle: string) => {\r      dispatch(changeTodolistTitleTC({todolistId, title: newTitle}))\r   }, [dispatch])\r\r   // Functions for tasks:\r   const removeTask = useCallback((todolistId: string, taskId: string) => {\r      dispatch(deleteTaskTC({todolistId, taskId}))\r   }, [dispatch])\r   const addTask = useCallback((title: string, todolistId: string) => {\r      dispatch(addTaskTC({todolistId, title}))\r   }, [dispatch])\r   const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses, todolistId: string) => {\r      dispatch(updateTaskTC({taskId, model: {status}, todolistId}))\r   }, [dispatch])\r   const changeTaskTitle = useCallback((taskId: string, title: string, todolistId: string) => {\r      dispatch(updateTaskTC({taskId, model: {title}, todolistId}))\r   }, [dispatch])\r\r   if (!isLoggedIn) {\r      return <Redirect to={'/login'}/>\r   }\r\r   return (\r      <Grid container style={{margin: '20px'}}>\r         <AddItemForm addItem={addTodolist}/>\r         <Grid container spacing={3}>\r            {\r               todolists.map(tl => {\r                  let tasksForTodolist = tasks[tl.id]\r\r                  return (\r                     <Grid item key={tl.id}>\r                        <Paper style={{padding: '15px'}}>\r                           <Todolist\r                              demo={props.demo}\r                              key={tl.id}\r                              id={tl.id}\r                              title={tl.title}\r                              entityStatus={tl.entityStatus}\r                              tasks={tasksForTodolist}\r                              removeTodolist={removeTodolist}\r                              removeTask={removeTask}\r                              changeFilter={changeFilter}\r                              addTask={addTask}\r                              changeTaskStatus={changeTaskStatus}\r                              changeTaskTitle={changeTaskTitle}\r                              filter={tl.filter}\r                              changeTodolistTitle={changeTodolistTitle}\r                           />\r                        </Paper>\r                     </Grid>\r                  )\r               })\r            }\r         </Grid>\r      </Grid>\r   )\r}\r\r//types\rtype TodolistsListT = {\r   demo?: boolean;\r};","import React from 'react'\rimport Snackbar from '@material-ui/core/Snackbar'\rimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\rimport {useDispatch, useSelector} from 'react-redux'\r\rimport {AppRootStateType} from '../../state/store'\rimport {setAppErrorAC} from '../../state/reducers/app-reducer'\r\rfunction Alert(props: AlertProps) {\r   return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r}\r\rexport function ErrorSnackbar() {\r\r   const error = useSelector<AppRootStateType, null | string>(state => state.app.error)\r   const dispatch = useDispatch()\r\r   const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r      if (reason === 'clickaway') {\r         return\r      }\r      dispatch(setAppErrorAC({error: null}))\r   }\r\r   return (\r      <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r         <Alert onClose={handleClose} severity=\"error\">\r            {error}\r         </Alert>\r      </Snackbar>\r   )\r}\r\r","import React from 'react'\rimport {Redirect} from 'react-router-dom'\rimport {useSelector} from 'react-redux'\rimport {FormikHelpers, useFormik} from 'formik'\rimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\rimport {loginTC} from '../../state/reducers/auth-reducer'\rimport {AppRootStateType, useAppDispatch} from '../../state/store'\r\r\rexport const Login = () => {\r   const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\r   const dispatch = useAppDispatch()\r\r   const formik = useFormik({\r      initialValues: {\r         email: 'seyran.m1@gmail.com',\r         password: 'h!4KW8Dgyimt4Um',\r         rememberMe: true\r      },\r      validate: (values) => {\r         const errors: FormikErrorType = {}\r\r         if (!values.email) {\r            errors.email = 'Email is required'\r         } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r            errors.email = 'Invalid email'\r         }\r\r         if (!values.password) {\r            errors.password = 'Password is required'\r         } else if (values.password.length < 4 || values.password.length > 15) {\r            errors.password = 'Password must be from 4 to 15 characters'\r         }\r\r         return errors\r      },\r      onSubmit: async (values: FormValuesT, formikHelpers: FormikHelpers<FormValuesT>) => {\r         const action = await dispatch(loginTC(values))\r\r         if (loginTC.rejected.match(action)) {\r            if (action.payload?.fieldsErrors?.length) {\r               const error = action.payload?.fieldsErrors[0]\r               formikHelpers.setFieldError(error.field, error.error)\r            }\r         }\r         formik.resetForm()\r      }\r   })\r\r   if (isLoggedIn) {\r      return <Redirect to={'/'}/>\r   }\r\r   return <Grid container justify=\"center\">\r      <Grid item xs={4}>\r         <form onSubmit={formik.handleSubmit}>\r            <FormControl>\r\r               <FormLabel>\r                  <p>To log in get registered\r                     <a href={'https://social-network.samuraijs.com/'} target={'_blank'}>here</a>\r                  </p>\r                  <p>or use common test account credentials:</p>\r                  <p>Email: free@samuraijs.com</p>\r                  <p>Password: free</p>\r               </FormLabel>\r\r               <FormGroup>\r                  <TextField\r                     label=\"Email\"\r                     margin=\"normal\"\r                     {...formik.getFieldProps('email')}\r                  />\r                  {formik.touched.email && formik.errors.email && (\r                     <div style={{color: 'red'}}>{formik.errors.email}</div>)}\r\r                  <TextField\r                     type=\"password\"\r                     label=\"Password\"\r                     margin=\"normal\"\r                     {...formik.getFieldProps('password')}\r\r                  />\r                  {formik.touched.password && formik.errors.password && (\r                     <div style={{color: 'red'}}>{formik.errors.password}</div>)}\r\r                  <FormControlLabel\r                     label=\"Remember me\"\r                     control={\r                        <Checkbox {...formik.getFieldProps('rememberMe')}/>\r                     }\r                  />\r                  <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r               </FormGroup>\r            </FormControl>\r         </form>\r      </Grid>\r   </Grid>\r}\r\r\r// types\rtype FormikErrorType = {\r   email?: string\r   password?: string\r   rememberMe?: boolean\r}\rtype FormValuesT = {\r   email: string\r   password: string\r   rememberMe: boolean\r}","import React, {FC, useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {Redirect, Route, Switch} from 'react-router-dom'\nimport {\n   AppBar,\n   Button,\n   CircularProgress,\n   Container,\n   IconButton,\n   LinearProgress,\n   Toolbar,\n   Typography\n} from '@material-ui/core'\nimport {Menu} from '@material-ui/icons'\n\nimport './App.css'\nimport styles from './App.module.css'\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\nimport {AppRootStateType} from '../state/store'\nimport {initializeAppTC, RequestStatusType} from '../state/reducers/app-reducer'\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\nimport {Login} from '../features/login/Login'\nimport {logoutTC} from '../state/reducers/auth-reducer'\n\ntype AppPropsT = {\n   demo?: boolean;\n};\n\nexport const App: FC<AppPropsT> = ({demo = false}) => {\n   console.log('App is called')\n\n   const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\n   const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\n   const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n   const dispatch = useDispatch()\n\n   useEffect(() => {\n      if (!demo) {\n         dispatch(initializeAppTC())\n      }\n   }, [])\n\n   const logoutHandler = () => dispatch(logoutTC())\n\n   if (!isInitialized) {\n      return (\n         <div style={{position: 'fixed', top: '40%', textAlign: 'center', width: '100%'}}>\n            <CircularProgress/>\n         </div>\n      )\n   }\n\n   return (\n      <>\n         <div className=\"App\">\n            <AppBar position=\"static\">\n               <Toolbar className={styles.toolbar}>\n                  <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                     <Menu/>\n                  </IconButton>\n                  <Typography className={styles.typography} variant=\"h6\">\n                     Todolists\n                  </Typography>\n\n                  {isLoggedIn &&\n                  <Button className={styles.button} color=\"inherit\" onClick={logoutHandler}>Logout</Button>}\n\n               </Toolbar>\n               {status === 'loading' && <LinearProgress/>}\n            </AppBar>\n            <Container fixed>\n               <Switch>\n                  <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\n                  <Route path={'/login'} render={() => <Login/>}/>\n                  <Route path={'/404'} render={() => <div className={styles.error}>Error 404: Page not found!</div>}/>\n                  <Redirect from={'*'} to={'/404'}/>\n               </Switch>\n            </Container>\n            <ErrorSnackbar/>\n         </div>\n      </>\n   )\n}\n","import React from 'react'\r\nimport {Provider} from 'react-redux'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport './index.scss'\r\nimport {store} from './state/store'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport {App} from './app/App'\r\nimport {HashRouter} from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n   <React.StrictMode>\r\n      <Provider store={store}>\r\n         <HashRouter>\r\n            <App/>\r\n         </HashRouter>\r\n      </Provider>\r\n   </React.StrictMode>\r\n\r\n   , document.getElementById('root'))\r\n\r\nserviceWorker.unregister()\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toolbar\":\"App_toolbar__1c24n\",\"typography\":\"App_typography__29t9B\",\"error\":\"App_error__2t8In\",\"button\":\"App_button__3lh9k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterButtons\":\"Todolist_filterButtons__3P7Sy\"};"],"sourceRoot":""}
{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","components/Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addTask","trim","addItem","e","currentTarget","value","key","EditableSpan","editMode","setEditMode","onChange","Todolist","newTitle","changeTodolistTitle","id","onClick","removeTodolist","tasks","map","t","className","isDone","type","checked","changeTaskStatus","newValue","changeTaskTitle","removeTask","filter","changeFilter","App","todolistID1","v1","todolistID2","todolists","setTodolists","todolistID","filteredTodolist","tl","tasksObj","setTasks","todolist","find","taskID","todolistTask","taskTitle","newTask","newFilterValue","changeStatus","task","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.64f0f3cf.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\rtype AddItemFormType = {\r   addItem: (title: string) => void\r}\r\rexport function AddItemForm(props: AddItemFormType) {\r   const [title, setTitle] = useState('')\r   const [error, setError] = useState<string | null>(null)\r\r   const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r      setTitle(e.currentTarget.value)\r      setError(null)\r   }\r   const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r      setError(null)\r      if (e.key === 'Enter') {\r         addTask()\r      }\r   }\r   const addTask = () => {\r      const trimmedTitle = title.trim()\r      if (trimmedTitle) {\r         props.addItem(title.trim());\r      } else {\r         setError('Title is required!')\r      }\r      setTitle(\"\");\r   }\r\r   return (\r      <div>\r         <input value={title}\r                onChange={onNewTitleChangeHandler}\r                onKeyPress={onKeyPressHandler}\r                className={error ? 'error' : ''}\r                onBlur={() => setError(null)}\r         />\r         <button onClick={addTask}>Add</button>\r         {error && <div className={'error-message'}>{error}</div>}\r      </div>)\r}","import React, {ChangeEvent, useState} from \"react\";\r\rtype EditableSpanPropsType = {\r   title: string\r   onChange: (newValue:string) => void\r}\r\rexport function EditableSpan(props: EditableSpanPropsType) {\r\r   let [editMode, setEditMode] = useState(false)\r   let [title, setTitle] = useState('')\r\r   const activateEditMode = () => {\r      setEditMode(true)\r      setTitle(props.title)\r\r   }\r   const activateViewMode = () => {\r      setEditMode(false)\r      props.onChange(title);\r   }\r   const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\r   return (\r      editMode\r         ? <input value={title} onChange={onChangeTitleHandler} onBlur={activateViewMode} autoFocus/>\r         : <span onDoubleClick={activateEditMode}>{props.title}</span>\r   )\r}","import React, {ChangeEvent} from 'react'\r\nimport {FilterValuesType} from '../App'\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\n\r\nexport type TaskType = {\r\n   id: string\r\n   title: string\r\n   isDone: boolean\r\n}\r\ntype TodolistPropsType = {\r\n   id: string\r\n   title: string\r\n   tasks: Array<TaskType>\r\n   filter: FilterValuesType\r\n   removeTask: (taskId: string, todolistID: string) => void\r\n   addTask: (taskTitle: string, todolistID: string) => void\r\n   changeFilter: (newFilterValue: FilterValuesType, todolistID: string) => void\r\n   changeTaskStatus: (taskID: string, isDone: boolean, todolistID: string) => void\r\n   changeTaskTitle: (taskID: string, newTitle: string, todolistID: string) => void\r\n   removeTodolist: (todolistID: string) => void\r\n   changeTodolistTitle: (todolistID: string,newTitle:string) => void\r\n}\r\n\r\nexport function Todolist(props: TodolistPropsType) {\r\n   const removeTodolist = () => {props.removeTodolist(props.id)}\r\n   const addTask = (title: string) => {props.addTask(title, props.id)}\r\n   const changeTodolistTitle=(newTitle:string)=>{\r\n      props.changeTodolistTitle(props.id, newTitle)\r\n   }\r\n\r\n   const onAllClickHandler = () => props.changeFilter('all', props.id)\r\n   const onActiveClickHandler = () => props.changeFilter('active', props.id)\r\n   const onCompletedClickHandler = () => props.changeFilter('completed', props.id)\r\n\r\n   return (\r\n      <div>\r\n         <h3>\r\n            <EditableSpan title={props.title} onChange={changeTodolistTitle}/>\r\n            <button onClick={removeTodolist}>X</button>\r\n         </h3>\r\n         <AddItemForm addItem={addTask}/>\r\n         <ul>\r\n            {props.tasks.map(t => {\r\n               const onRemoveHandler = () => props.removeTask(t.id, props.id)\r\n               const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                  props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)\r\n               }\r\n               const onChangeTitleHandler = (newValue:string) => {\r\n                  props.changeTaskTitle(t.id, newValue, props.id);\r\n               }\r\n               return (\r\n                  <li className={t.isDone ? 'is-done' : ''} key={t.id}>\r\n                     <input type=\"checkbox\"\r\n                            checked={t.isDone}\r\n                            onChange={onChangeStatusHandler}\r\n                     />\r\n                     <EditableSpan title={t.title}\r\n                                   onChange={onChangeTitleHandler}/>\r\n                     <button onClick={onRemoveHandler}>x</button>\r\n                  </li>\r\n               )\r\n            })\r\n            }\r\n         </ul>\r\n         <div>\r\n            <button className={props.filter === 'all' ? 'active-filter' : ''}\r\n                    onClick={onAllClickHandler}>All\r\n            </button>\r\n            <button className={props.filter === 'active' ? 'active-filter' : ''}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </button>\r\n            <button className={props.filter === 'completed' ? 'active-filter' : ''}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </button>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\n\r\n","import React, {useState} from 'react'\r\nimport './App.css'\r\nimport {Todolist} from './components/Todolist'\r\nimport {v1} from \"uuid\"\r\nimport {TaskType} from \"./components/Todolist\";\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\ntype TodolistType = {\r\n   id: string\r\n   title: string\r\n   filter: FilterValuesType\r\n}\r\ntype TasksStateType = {\r\n   [key: string]: Array<TaskType>\r\n}\r\n\r\nexport function App() {\r\n\r\n   const todolistID1 = v1()\r\n   const todolistID2 = v1()\r\n\r\n   const [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n      {id: todolistID1, title: 'What to learn', filter: \"all\"},\r\n      {id: todolistID2, title: 'What to bye', filter: \"all\"},\r\n   ])\r\n\r\n   function removeTodolist(todolistID: string) {\r\n      const filteredTodolist = todolists.filter(tl => tl.id !== todolistID)\r\n      setTodolists(filteredTodolist)\r\n\r\n      delete tasksObj[todolistID]\r\n      setTasks({...tasksObj})\r\n   }\r\n\r\n   function changeTodolistTitle(todolistID: string, newTitle: string) {\r\n      const todolist = todolists.find(tl => tl.id === todolistID);\r\n      if (todolist) {\r\n         todolist.title = newTitle;\r\n         setTodolists([...todolists])\r\n      }\r\n   }\r\n\r\n\r\n   const [tasksObj, setTasks] = useState<TasksStateType>({\r\n      [todolistID1]: [\r\n         {id: v1(), title: 'HTML&CSS', isDone: true},\r\n         {id: v1(), title: 'JS', isDone: true},\r\n         {id: v1(), title: 'ReactJS', isDone: false},\r\n         {id: v1(), title: 'Rest API', isDone: false},\r\n         {id: v1(), title: 'GraphQL', isDone: false},\r\n      ],\r\n      [todolistID2]: [\r\n         {id: v1(), title: 'Bread', isDone: true},\r\n         {id: v1(), title: 'Milk', isDone: true},\r\n         {id: v1(), title: 'Coffee', isDone: false},\r\n      ],\r\n   })\r\n\r\n   function removeTask(taskID: string, todolistID: string) {\r\n      const todolistTask = tasksObj[todolistID]\r\n      tasksObj[todolistID] = todolistTask.filter(t => t.id !== taskID)\r\n      setTasks({...tasksObj})\r\n   }\r\n\r\n   function addTask(taskTitle: string, todolistID: string) {\r\n      let newTask = {\r\n         id: v1(),\r\n         title: taskTitle,\r\n         isDone: false\r\n      }\r\n      const todolistTask = tasksObj[todolistID]\r\n      tasksObj[todolistID] = [newTask, ...todolistTask]\r\n      setTasks({...tasksObj})\r\n   }\r\n\r\n   function changeFilter(newFilterValue: FilterValuesType, todolistID: string) {\r\n      const todolist = todolists.find(tl => tl.id === todolistID)\r\n      if (todolist) {\r\n         todolist.filter = newFilterValue\r\n         setTodolists([...todolists])\r\n      }\r\n   }\r\n\r\n   function changeStatus(taskID: string, isDone: boolean, todolistID: string) {\r\n      const todolistTasks = tasksObj[todolistID]\r\n\r\n      const task: TaskType | undefined = todolistTasks.find(t => t.id === taskID)\r\n      if (task) {\r\n         task.isDone = isDone\r\n         setTasks({...tasksObj})\r\n      }\r\n   }\r\n\r\n   function changeTaskTitle(taskID: string, newTitle: string, todolistID: string) {\r\n      const todolistTasks = tasksObj[todolistID]\r\n\r\n      const task: TaskType | undefined = todolistTasks.find(t => t.id === taskID)\r\n      if (task) {\r\n         task.title = newTitle\r\n         setTasks({...tasksObj})\r\n      }\r\n   }\r\n\r\n   function addTodolist(title: string) {\r\n      const todolist: TodolistType = {\r\n         id: v1(), filter: \"all\", title: title\r\n      }\r\n      setTodolists([todolist, ...todolists])\r\n      setTasks({\r\n         ...tasksObj,\r\n         [todolist.id]: []\r\n      })\r\n   }\r\n\r\n   return (\r\n      <div className=\"App\">\r\n         <AddItemForm addItem={addTodolist}/>\r\n         {\r\n            todolists.map(tl => {\r\n               let tasksForTodolist = tasksObj[tl.id]\r\n               if (tl.filter === 'active') {\r\n                  tasksForTodolist = tasksForTodolist.filter(t => t.isDone === false)\r\n               }\r\n               if (tl.filter === 'completed') {\r\n                  tasksForTodolist = tasksForTodolist.filter(t => t.isDone === true)\r\n               }\r\n               return <Todolist\r\n                  key={tl.id}\r\n                  id={tl.id}\r\n                  title={tl.title}\r\n                  tasks={tasksForTodolist}\r\n                  removeTodolist={removeTodolist}\r\n                  removeTask={removeTask}\r\n                  changeFilter={changeFilter}\r\n                  addTask={addTask}\r\n                  changeTaskStatus={changeStatus}\r\n                  changeTaskTitle={changeTaskTitle}\r\n                  filter={tl.filter}\r\n                  changeTodolistTitle={changeTodolistTitle}\r\n               />\r\n            })\r\n         }\r\n\r\n      </div>\r\n   )\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"version":3,"sources":["api/types.ts","api/todolists-api.ts","features/CommonActions/App.ts","utils/error-utils.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","utils/redux-utils.ts","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/Auth/selectors.ts","features/Application/selectors.ts","features/TodolistsList/TodolistsList.tsx","features/TodolistsList/index.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Auth/auth-reducer.ts","features/Auth/Login.tsx","features/Auth/index.tsx","features/Application/application-reducer.ts","features/Application/index.tsx","app/App.tsx","app/store.ts","serviceWorker.ts","index.tsx","app/App.module.css"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","appActions","setAppStatus","createAction","setAppError","handleAsyncServerAppError","thunkAPI","showError","dispatch","error","messages","length","status","rejectWithValue","errors","fieldsErrors","handleAsyncServerNetworkError","message","undefined","fetchTodolistsTC","createAsyncThunk","param","a","res","todolists","removeTodolistTC","changeTodolistEntityStatus","addTodolistTC","resultCode","todolist","item","changeTodolistTitleTC","asyncActions","slice","createSlice","name","initialState","reducers","changeTodolistFilter","state","action","index","findIndex","tl","payload","filter","entityStatus","extraReducers","builder","addCase","fulfilled","map","splice","unshift","actions","fetchTasks","tasks","items","removeTask","addTask","updateTask","getState","task","find","t","apiModel","deadline","description","priority","startDate","asyncTodolistsActions","forEach","todoListId","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","style","marginLeft","AddBox","EditableSpan","props","console","log","editMode","setEditMode","activateViewMode","onBlur","autoFocus","key","onDoubleClick","useAppDispatch","useDispatch","useActions","useMemo","bindActionCreators","Task","tasksActions","onClickHandler","useCallback","onChangeHandler","checked","Completed","New","onTitleChangeHandler","newValue","className","position","Checkbox","size","top","right","Delete","fontSize","Todolist","demo","todolistsActions","useEffect","addTaskCallback","helper","thunk","resultAction","rejected","match","errorMessage","changeTodolistTitle","onFilterButtonClickHandler","tasksForTodolist","renderFilterButton","buttonFilter","text","Button","Paper","padding","paddingTop","selectIsLoggedIn","auth","isLoggedIn","selectStatus","app","selectIsInitialized","isInitialized","selectError","selectTodolists","selectTasks","TodolistsList","useSelector","addTodolistCallback","Grid","container","spacing","flexWrap","allTodolistTasks","width","to","todolistsAsyncActions","todolistsSlice","tasksAsyncActions","tasksSlice","todolistsReducer","reducer","tasksReducer","Alert","elevation","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","login","logout","setIsLoggedIn","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","formikHelpers","authActions","setFieldError","field","justify","xs","handleSubmit","FormControl","FormLabel","href","rel","FormGroup","margin","getFieldProps","type","FormControlLabel","control","authReducer","initializeApp","appReducer","App","logoutHandler","AppBar","Toolbar","edge","aria-label","Menu","styles","header","Typography","LinearProgress","Container","fixed","exact","path","render","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","Boolean","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.4fef256e.chunk.js","sourcesContent":["// types\r\nexport type LoginParamsType = {\r\n   email: string\r\n   password: string\r\n   rememberMe: boolean\r\n   captcha?: string\r\n}\r\nexport type TodolistType = {\r\n   id: string\r\n   title: string\r\n   addedDate: string\r\n   order: number\r\n}\r\nexport type FieldErrorType = { field: string; error: string }\r\nexport type ResponseType<D = {}> = {\r\n   resultCode: number\r\n   messages: Array<string>\r\n   fieldsErrors?: Array<FieldErrorType>\r\n   data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n   New = 0,\r\n   InProgress = 1,\r\n   Completed = 2,\r\n   Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n   Low = 0,\r\n   Middle = 1,\r\n   Hi = 2,\r\n   Urgently = 3,\r\n   Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n   description: string\r\n   title: string\r\n   status: TaskStatuses\r\n   priority: TaskPriorities\r\n   startDate: string\r\n   deadline: string\r\n   id: string\r\n   todoListId: string\r\n   order: number\r\n   addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n   title: string\r\n   description: string\r\n   status: TaskStatuses\r\n   priority: TaskPriorities\r\n   startDate: string\r\n   deadline: string\r\n}\r\nexport type GetTasksResponse = {\r\n   error: string | null\r\n   totalCount: number\r\n   items: TaskType[]\r\n}\r\n","import axios from 'axios'\r\nimport {GetTasksResponse, LoginParamsType, ResponseType, TaskType, TodolistType, UpdateTaskModelType} from './types'\r\n\r\nconst settings = {\r\n   withCredentials: true,\r\n   headers: {\r\n      'API-KEY': '85f20b48-f9ce-40aa-b7ca-82ca81a13c9b'\r\n   }\r\n}\r\nconst instance = axios.create({\r\n   baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n   ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n   getTodolists() {\r\n      return instance.get<TodolistType[]>('todo-lists')\r\n   },\r\n   createTodolist(title: string) {\r\n      return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title})\r\n   },\r\n   deleteTodolist(id: string) {\r\n      return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n   },\r\n   updateTodolist(id: string, title: string) {\r\n      return instance.put<ResponseType>(`todo-lists/${id}`, {title: title})\r\n   },\r\n   getTasks(todolistId: string) {\r\n      return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n   },\r\n   deleteTask(todolistId: string, taskId: string) {\r\n      return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n   },\r\n   createTask(todolistId: string, taskTitile: string) {\r\n      return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile})\r\n   },\r\n   updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n      return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n   }\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n   login(data: LoginParamsType) {\r\n      return instance.post<ResponseType<{ userId?: number }>>('auth/login', data)\r\n   },\r\n   logout() {\r\n      return instance.delete<ResponseType<{ userId?: number }>>('auth/login')\r\n   },\r\n   me() {\r\n      return instance.get<ResponseType<{ id: number; email: string; login: string }>>('auth/me')\r\n   }\r\n}\r\n\r\n","import {createAction} from '@reduxjs/toolkit'\r\nimport {RequestStatusType} from '../Application/application-reducer'\r\n\r\n\r\nconst setAppStatus = createAction<{ status: RequestStatusType }>('appActions/setAppStatus')\r\nconst setAppError = createAction<{ error: string | null }>('appActions/setAppError')\r\n\r\nexport const appActions = {\r\n   setAppStatus,\r\n   setAppError\r\n}\r\n","import {AxiosError} from 'axios'\r\nimport {appActions} from '../features/CommonActions/App'\r\nimport {ResponseType} from '../api/types'\r\n\r\n// original type:\r\n// BaseThunkAPI<S, E, D extends Dispatch = Dispatch, RejectedValue = undefined>\r\ntype ThunkAPIType = {\r\n   dispatch: (action: any) => any\r\n   rejectWithValue: Function\r\n}\r\n\r\nexport const handleAsyncServerAppError = <D>(data: ResponseType<D>,\r\n                                             thunkAPI: ThunkAPIType,\r\n                                             showError = true) => {\r\n   if (showError) {\r\n      thunkAPI.dispatch(appActions.setAppError({error: data.messages.length ? data.messages[0] : 'Some error occurred'}))\r\n   }\r\n   thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n   return thunkAPI.rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors})\r\n}\r\n\r\nexport const handleAsyncServerNetworkError = (error: AxiosError,\r\n                                              thunkAPI: ThunkAPIType,\r\n                                              showError = true) => {\r\n   if (showError) {\r\n      thunkAPI.dispatch(appActions.setAppError({error: error.message ? error.message : 'Some error occurred'}))\r\n   }\r\n   thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n\r\n   return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n}\r\n","import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\nimport {todolistsAPI} from '../../api/todolists-api'\r\nimport {RequestStatusType} from '../Application'\r\nimport {appActions} from '../CommonActions/App'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError,} from '../../utils/error-utils'\r\nimport {TodolistType} from '../../api/types'\r\nimport {ThunkError} from '../../utils/types'\r\n\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nconst fetchTodolistsTC = createAsyncThunk<{ todolists: TodolistType[] }, undefined, ThunkError>('todolists/fetchTodolists', async (param, thunkAPI) => {\r\n   thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n   try {\r\n      const res = await todolistsAPI.getTodolists()\r\n      thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n      return {todolists: res.data}\r\n   } catch (error) {\r\n      return handleAsyncServerNetworkError(error, thunkAPI)\r\n   }\r\n})\r\nconst removeTodolistTC = createAsyncThunk<{ id: string }, string, ThunkError>('todolists/removeTodolist', async (todolistId, {\r\n   dispatch\r\n}) => {\r\n   //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n   dispatch(setAppStatus({status: 'loading'}))\r\n   //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n   dispatch(changeTodolistEntityStatus({id: todolistId, status: 'loading'}))\r\n   await todolistsAPI.deleteTodolist(todolistId)\r\n   //скажем глобально приложению, что асинхронная операция завершена\r\n   dispatch(setAppStatus({status: 'succeeded'}))\r\n   return {id: todolistId}\r\n})\r\nconst addTodolistTC = createAsyncThunk<{ todolist: TodolistType }, string, ThunkError>\r\n('todolists/addTodolist', async (title, thunkAPI) => {\r\n   thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n   try {\r\n      const res = await todolistsAPI.createTodolist(title)\r\n      if (res.data.resultCode === 0) {\r\n         thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n         return {todolist: res.data.data.item}\r\n      } else {\r\n         return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n      }\r\n   } catch (error) {\r\n      return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n   }\r\n})\r\nconst changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle', async (param: { id: string, title: string }, thunkAPI) => {\r\n   try {\r\n      const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n      if (res.data.resultCode === 0) {\r\n         thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n         return {id: param.id, title: param.title}\r\n      } else {\r\n         return handleAsyncServerAppError(res.data, thunkAPI)\r\n      }\r\n   } catch (error) {\r\n      return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n   }\r\n})\r\n\r\nexport const asyncActions = {\r\n   fetchTodolistsTC,\r\n   removeTodolistTC,\r\n   addTodolistTC,\r\n   changeTodolistTitleTC\r\n}\r\n\r\nexport const slice = createSlice({\r\n   name: 'todolists',\r\n   initialState: [] as Array<TodolistDomainType>,\r\n   reducers: {\r\n      changeTodolistFilter(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n         const index = state.findIndex(tl => tl.id === action.payload.id)\r\n         state[index].filter = action.payload.filter\r\n      },\r\n      changeTodolistEntityStatus(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n         const index = state.findIndex(tl => tl.id === action.payload.id)\r\n         state[index].entityStatus = action.payload.status\r\n      }\r\n   },\r\n   extraReducers: builder => {\r\n      builder\r\n         .addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map((tl) => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n         })\r\n         .addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n               state.splice(index, 1)\r\n            }\r\n         })\r\n         .addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n         })\r\n         .addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n         })\r\n   }\r\n})\r\n\r\nexport const {changeTodolistFilter, changeTodolistEntityStatus} = slice.actions\r\n\r\n// types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n   filter: FilterValuesType\r\n   entityStatus: RequestStatusType\r\n}\r\n","import {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\n\r\nimport {todolistsAPI} from '../../api/todolists-api'\r\nimport {appActions} from '../CommonActions/App'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from '../../utils/error-utils'\r\nimport {asyncActions as asyncTodolistsActions} from './todolists-reducer'\r\nimport {AppRootStateType, ThunkError} from '../../utils/types'\r\nimport {TaskPriorities, TaskStatuses, TaskType, UpdateTaskModelType} from '../../api/types'\r\n\r\n\r\nexport const fetchTasks = createAsyncThunk<{ tasks: TaskType[], todolistId: string }, string, ThunkError>('tasks/fetchTasks', async (todolistId, thunkAPI) => {\r\n   thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n   try {\r\n      const res = await todolistsAPI.getTasks(todolistId)\r\n      const tasks = res.data.items\r\n      thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n      return {tasks, todolistId}\r\n   } catch (error) {\r\n      return handleAsyncServerNetworkError(error, thunkAPI)\r\n   }\r\n})\r\nexport const removeTask = createAsyncThunk<{ taskId: string, todolistId: string }, { taskId: string, todolistId: string }, ThunkError>('tasks/removeTask',\r\n   async (param) => {\r\n      await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n      return {taskId: param.taskId, todolistId: param.todolistId}\r\n   })\r\nexport const addTask = createAsyncThunk<TaskType, { title: string, todolistId: string }, ThunkError>('tasks/addTask',\r\n   async (param, thunkAPI) => {\r\n      thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n      try {\r\n         const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n         if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n            return res.data.data.item\r\n         } else {\r\n            handleAsyncServerAppError(res.data, thunkAPI, false)\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n         }\r\n      } catch (err) {\r\n         return handleAsyncServerNetworkError(err, thunkAPI, false)\r\n      }\r\n   })\r\nexport const updateTask = createAsyncThunk('tasks/updateTask', async (param: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string },\r\n                                                                      thunkAPI) => {\r\n   const state = thunkAPI.getState() as AppRootStateType\r\n\r\n   const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n   if (!task) {\r\n      return thunkAPI.rejectWithValue('task not found in the state')\r\n   }\r\n\r\n   const apiModel: UpdateTaskModelType = {\r\n      deadline: task.deadline,\r\n      description: task.description,\r\n      priority: task.priority,\r\n      startDate: task.startDate,\r\n      title: task.title,\r\n      status: task.status,\r\n      ...param.model\r\n   }\r\n\r\n   const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n   try {\r\n      if (res.data.resultCode === 0) {\r\n         return param\r\n      } else {\r\n         return handleAsyncServerAppError(res.data, thunkAPI)\r\n      }\r\n   } catch (error) {\r\n      return handleAsyncServerNetworkError(error, thunkAPI)\r\n   }\r\n})\r\n\r\nexport const asyncActions = {\r\n   fetchTasks,\r\n   removeTask,\r\n   addTask,\r\n   updateTask\r\n}\r\n\r\nexport const slice = createSlice({\r\n   name: 'tasks',\r\n   initialState: {} as TasksStateType,\r\n   reducers: {},\r\n   extraReducers: (builder) => {\r\n      builder\r\n         .addCase(asyncTodolistsActions.addTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n         })\r\n         .addCase(asyncTodolistsActions.removeTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.id]\r\n         })\r\n         .addCase(asyncTodolistsActions.fetchTodolistsTC.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach((tl: any) => {\r\n               state[tl.id] = []\r\n            })\r\n         })\r\n         .addCase(fetchTasks.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n         })\r\n         .addCase(removeTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n               tasks.splice(index, 1)\r\n            }\r\n         })\r\n         .addCase(addTask.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n         })\r\n         .addCase(updateTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n               tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n         })\r\n   }\r\n})\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n   title?: string\r\n   description?: string\r\n   status?: TaskStatuses\r\n   priority?: TaskPriorities\r\n   startDate?: string\r\n   deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n   [key: string]: Array<TaskType>\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {IconButton, TextField} from '@material-ui/core'\r\nimport {AddBox} from '@material-ui/icons'\r\n\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n   let [title, setTitle] = useState('')\r\n   let [error, setError] = useState<string | null>(null)\r\n\r\n   const addItemHandler = async () => {\r\n      if (title.trim() !== '') {\r\n         addItem(title, {setError, setTitle})\r\n      } else {\r\n         setError('Title is required')\r\n      }\r\n   }\r\n\r\n   const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n      setTitle(e.currentTarget.value)\r\n   }\r\n\r\n   const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n      if (error !== null) {\r\n         setError(null)\r\n      }\r\n      if (e.charCode === 13) {\r\n         addItemHandler()\r\n      }\r\n   }\r\n\r\n   return <div>\r\n      <TextField variant=\"outlined\"\r\n                 disabled={disabled}\r\n                 error={!!error}\r\n                 value={title}\r\n                 onChange={onChangeHandler}\r\n                 onKeyPress={onKeyPressHandler}\r\n                 label=\"Title\"\r\n                 helperText={error}\r\n      />\r\n      <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled} style={{marginLeft: '5px'}}>\r\n         <AddBox/>\r\n      </IconButton>\r\n   </div>\r\n})\r\n\r\n// types\r\nexport type AddItemFormSubmitHelperType = { setError: (error: string) => void, setTitle: (title: string) => void }\r\ntype AddItemFormPropsType = {\r\n   addItem: (title: string, helper: AddItemFormSubmitHelperType) => void\r\n   disabled?: boolean\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {TextField} from '@material-ui/core'\r\n\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n   console.log('EditableSpan called')\r\n   let [editMode, setEditMode] = useState(false)\r\n   let [title, setTitle] = useState(props.value)\r\n\r\n   const activateEditMode = () => {\r\n      setEditMode(true)\r\n      setTitle(props.value)\r\n   }\r\n   const activateViewMode = () => {\r\n      setEditMode(false)\r\n      props.onChange(title)\r\n   }\r\n   const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n      setTitle(e.currentTarget.value)\r\n   }\r\n   const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n      if (e.key === 'Enter') {\r\n         activateViewMode()\r\n      }\r\n   }\r\n\r\n   return editMode\r\n      ? <TextField value={title} onChange={changeTitle} onBlur={activateViewMode} autoFocus\r\n                   onKeyPress={onKeyPressHandler}\r\n      />\r\n      : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n})\r\n\r\n// types\r\ntype EditableSpanPropsType = {\r\n   value: string\r\n   onChange: (newValue: string) => void\r\n}","import {useMemo} from 'react'\r\nimport {useDispatch} from 'react-redux'\r\nimport {ActionCreatorsMapObject, bindActionCreators} from 'redux'\r\n\r\nimport {AppDispatchType} from './types'\r\n\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n   const dispatch = useAppDispatch()\r\n\r\n   const boundActions = useMemo(() => {\r\n      return bindActionCreators(actions, dispatch)\r\n   }, [])\r\n\r\n   return boundActions\r\n}\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\n\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {tasksActions} from '../../index'\r\nimport {TaskStatuses, TaskType} from '../../../../api/types'\r\nimport {useActions} from '../../../../utils/redux-utils'\r\n\r\n\r\nexport const Task = React.memo<TaskPropsType>((props) => {\r\n   const {updateTask, removeTask} = useActions(tasksActions)\r\n\r\n   const onClickHandler = useCallback(() => removeTask({taskId: props.task.id, todolistId: props.todolistId}),\r\n      [props.task.id, props.todolistId])\r\n\r\n   const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n      updateTask({\r\n         taskId: props.task.id,\r\n         model: {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New},\r\n         todolistId: props.todolistId\r\n      })\r\n   }, [props.task.id, props.todolistId])\r\n\r\n   const onTitleChangeHandler = useCallback((newValue: string) => {\r\n      updateTask({\r\n         taskId: props.task.id,\r\n         model: {title: newValue},\r\n         todolistId: props.todolistId\r\n      })\r\n   }, [props.task.id, props.todolistId])\r\n\r\n   return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}\r\n               style={{position: 'relative'}}>\r\n      <Checkbox\r\n         checked={props.task.status === TaskStatuses.Completed}\r\n         color=\"primary\"\r\n         onChange={onChangeHandler}\r\n      />\r\n\r\n      <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n      <IconButton size={'small'} onClick={onClickHandler} style={{position: 'absolute', top: '2px', right: '2px'}}>\r\n         <Delete fontSize={'small'}/>\r\n      </IconButton>\r\n   </div>\r\n})\r\n\r\n// types\r\ntype TaskPropsType = {\r\n   task: TaskType\r\n   todolistId: string\r\n}","import React, {useCallback, useEffect} from 'react'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Button, IconButton, Paper, PropTypes} from '@material-ui/core'\r\n\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Task} from './Task/Task'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {tasksActions, todolistsActions} from '../index'\r\nimport {TaskStatuses, TaskType} from '../../../api/types'\r\nimport {useActions, useAppDispatch} from '../../../utils/redux-utils'\r\n\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n   const {fetchTasks} = useActions(tasksActions)\r\n   const {changeTodolistFilter, removeTodolistTC, changeTodolistTitleTC} = useActions(todolistsActions)\r\n\r\n   const dispatch = useAppDispatch()\r\n\r\n   useEffect(() => {\r\n      if (demo) {\r\n         return\r\n      }\r\n      fetchTasks(props.todolist.id)\r\n   }, [])\r\n\r\n   const addTaskCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n\r\n      let thunk = tasksActions.addTask({title: title, todolistId: props.todolist.id})\r\n      const resultAction = await dispatch(thunk)\r\n\r\n      if (tasksActions.addTask.rejected.match(resultAction)) {\r\n         if (resultAction.payload?.errors?.length) {\r\n            const errorMessage = resultAction.payload?.errors[0]\r\n            helper.setError(errorMessage)\r\n         } else {\r\n            helper.setError('Some error occured')\r\n         }\r\n      } else {\r\n         helper.setTitle('')\r\n      }\r\n\r\n   }, [props.todolist.id])\r\n\r\n   const removeTodolist = () => {\r\n      removeTodolistTC(props.todolist.id)\r\n   }\r\n   const changeTodolistTitle = useCallback((title: string) => {\r\n      changeTodolistTitleTC({id: props.todolist.id, title: title})\r\n   }, [props.todolist.id])\r\n\r\n   const onFilterButtonClickHandler = useCallback((filter: FilterValuesType) => changeTodolistFilter({\r\n      filter: filter,\r\n      id: props.todolist.id\r\n   }), [props.todolist.id])\r\n\r\n   let tasksForTodolist = props.tasks\r\n\r\n   if (props.todolist.filter === 'active') {\r\n      tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n   }\r\n   if (props.todolist.filter === 'completed') {\r\n      tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n   }\r\n\r\n   const renderFilterButton = (buttonFilter: FilterValuesType,\r\n                               color: PropTypes.Color,\r\n                               text: string) => {\r\n      return <Button variant={props.todolist.filter === buttonFilter ? 'outlined' : 'text'}\r\n                     onClick={() => onFilterButtonClickHandler(buttonFilter)}\r\n                     color={color}>{text}\r\n      </Button>\r\n   }\r\n\r\n   return <Paper style={{padding: '10px', position: 'relative'}}>\r\n      <IconButton\r\n         size={'small'}\r\n         onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}\r\n         style={{position: 'absolute', right: '5px', top: '5px'}}\r\n      >\r\n         <Delete fontSize={'small'}/>\r\n      </IconButton>\r\n      <h3>\r\n         <EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n      </h3>\r\n      <AddItemForm addItem={addTaskCallback} disabled={props.todolist.entityStatus === 'loading'}/>\r\n      <div>\r\n         {\r\n            tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}/>)\r\n         }\r\n         {!tasksForTodolist.length && <div style={{padding: '10px', color: 'grey'}}>No task</div>}\r\n      </div>\r\n      <div style={{paddingTop: '10px'}}>\r\n         {renderFilterButton('all', 'default', 'All')}\r\n         {renderFilterButton('active', 'primary', 'Active')}\r\n         {renderFilterButton('completed', 'secondary', 'Completed')}\r\n      </div>\r\n   </Paper>\r\n})\r\n\r\n// types\r\ntype PropsType = {\r\n   todolist: TodolistDomainType\r\n   tasks: Array<TaskType>\r\n   demo?: boolean\r\n}","import {AppRootStateType} from '../../utils/types'\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn\r\n","import {AppRootStateType} from '../../utils/types'\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized\r\nexport const selectError = (state: AppRootStateType) => state.app.error\r\nexport const selectTodolists = (state: AppRootStateType) => state.todolists\r\nexport const selectTasks = (state: AppRootStateType) => state.tasks\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {useSelector} from 'react-redux'\r\nimport {Grid} from '@material-ui/core'\r\n\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {selectIsLoggedIn} from '../Auth/selectors'\r\nimport {todolistsActions} from './index'\r\nimport {useActions, useAppDispatch} from '../../utils/redux-utils'\r\nimport {selectTasks, selectTodolists} from '../Application/selectors'\r\n\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n   const tasks = useSelector(selectTasks)\r\n   const isLoggedIn = useSelector(selectIsLoggedIn)\r\n   const todolists = useSelector(selectTodolists)\r\n\r\n   const {fetchTodolistsTC} = useActions(todolistsActions)\r\n\r\n   const dispatch = useAppDispatch()\r\n\r\n   const addTodolistCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n      let thunk = todolistsActions.addTodolistTC(title)\r\n      const resultAction = await dispatch(thunk)\r\n\r\n      if (todolistsActions.addTodolistTC.rejected.match(resultAction)) {\r\n         if (resultAction.payload?.errors?.length) {\r\n            const errorMessage = resultAction.payload?.errors[0]\r\n            helper.setError(errorMessage)\r\n         } else {\r\n            helper.setError('Some error occured')\r\n         }\r\n      } else {\r\n         helper.setTitle('')\r\n      }\r\n   }, [])\r\n\r\n\r\n   useEffect(() => {\r\n      if (demo || !isLoggedIn) {\r\n         return\r\n      }\r\n      fetchTodolistsTC()\r\n   }, [])\r\n\r\n\r\n   if (!isLoggedIn) {\r\n      return <Redirect to={'/login'}/>\r\n   }\r\n\r\n   return <>\r\n      <Grid container style={{padding: '20px'}}>\r\n         <AddItemForm addItem={addTodolistCallback}/>\r\n      </Grid>\r\n      <Grid container spacing={3} style={{flexWrap: 'wrap'}}>\r\n         {\r\n            todolists.map(tl => {\r\n               let allTodolistTasks = tasks[tl.id]\r\n\r\n               return <Grid item key={tl.id}>\r\n                  <div style={{width: '300px'}}>\r\n                     <Todolist\r\n                        todolist={tl}\r\n                        tasks={allTodolistTasks}\r\n                        demo={demo}\r\n                     />\r\n                  </div>\r\n               </Grid>\r\n            })\r\n         }\r\n      </Grid>\r\n   </>\r\n}\r\n\r\n//types\r\ntype PropsType = {\r\n   demo?: boolean\r\n}","import {asyncActions as todolistsAsyncActions, slice as todolistsSlice} from './todolists-reducer'\r\nimport {asyncActions as tasksAsyncActions, slice as tasksSlice} from './tasks-reducer'\r\nimport {TodolistsList} from './TodolistsList'\r\n\r\nconst todolistsActions = {\r\n   ...todolistsAsyncActions,\r\n   ...todolistsSlice.actions\r\n}\r\nconst tasksActions = {\r\n   ...tasksAsyncActions,\r\n   ...tasksSlice.actions\r\n}\r\n\r\nconst todolistsReducer = todolistsSlice.reducer\r\nconst tasksReducer = tasksSlice.reducer\r\n\r\nexport {\r\n   tasksActions,\r\n   todolistsActions,\r\n   TodolistsList,\r\n   todolistsReducer,\r\n   tasksReducer\r\n}\r\n","import React from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\n\r\nimport {appActions} from '../../features/CommonActions/App'\r\nimport {useActions} from '../../utils/redux-utils'\r\nimport {selectError} from '../../features/Application/selectors'\r\n\r\n\r\nfunction Alert(props: AlertProps) {\r\n   return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n   //const [open, setOpen] = React.useState(true)\r\n   const error = useSelector(selectError)\r\n   const {setAppError} = useActions(appActions)\r\n\r\n   const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n      if (reason === 'clickaway') {\r\n         return\r\n      }\r\n      setAppError({error: null})\r\n   }\r\n\r\n   const isOpen = error !== null\r\n\r\n   return (\r\n      <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n         <Alert onClose={handleClose} severity=\"error\">\r\n            {error}\r\n         </Alert>\r\n      </Snackbar>\r\n   )\r\n}\r\n","import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\nimport {authAPI} from '../../api/todolists-api'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from '../../utils/error-utils'\r\nimport {FieldErrorType, LoginParamsType} from '../../api/types'\r\nimport {appActions} from '../CommonActions/App'\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nexport const login = createAsyncThunk<undefined, LoginParamsType,\r\n   { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> } }>('auth/login', async (param, thunkAPI) => {\r\n   thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n   try {\r\n      const res = await authAPI.login(param)\r\n      if (res.data.resultCode === 0) {\r\n         thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n         return\r\n      } else {\r\n         return handleAsyncServerAppError(res.data, thunkAPI)\r\n      }\r\n   } catch (error) {\r\n      return handleAsyncServerNetworkError(error, thunkAPI)\r\n   }\r\n})\r\nexport const logout = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n   thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n   try {\r\n      const res = await authAPI.logout()\r\n      if (res.data.resultCode === 0) {\r\n         thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n         return\r\n      } else {\r\n         return handleAsyncServerAppError(res.data, thunkAPI)\r\n      }\r\n   } catch (error) {\r\n      return handleAsyncServerNetworkError(error, thunkAPI)\r\n   }\r\n})\r\n\r\nexport const asyncActions = {login, logout}\r\n\r\nexport const slice = createSlice({\r\n   name: 'auth',\r\n   initialState: {\r\n      isLoggedIn: false\r\n   },\r\n   reducers: {\r\n      setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\r\n         state.isLoggedIn = action.payload.value\r\n      }\r\n   },\r\n   extraReducers: builder => {\r\n      builder\r\n         .addCase(login.fulfilled, (state) => {\r\n            state.isLoggedIn = true\r\n         })\r\n         .addCase(logout.fulfilled, (state) => {\r\n            state.isLoggedIn = false\r\n         })\r\n   }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedIn} = slice.actions\r\n\r\n\r\n","import React from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {FormikHelpers, useFormik} from 'formik'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\n\r\nimport {authActions} from './index'\r\nimport {login} from './auth-reducer'\r\nimport {selectIsLoggedIn} from './selectors'\r\nimport {useAppDispatch} from '../../utils/redux-utils'\r\n\r\n\r\nexport const Login = () => {\r\n   const isLoggedIn = useSelector(selectIsLoggedIn)\r\n   const dispatch = useAppDispatch()\r\n\r\n   const formik = useFormik({\r\n      validate: (values) => {\r\n         if (!values.email) {\r\n            return {\r\n               email: 'Email is required'\r\n            }\r\n         }\r\n         if (!values.password) {\r\n            return {\r\n               password: 'Password is required'\r\n            }\r\n         }\r\n\r\n      },\r\n      initialValues: {\r\n         email: '',\r\n         password: '',\r\n         rememberMe: false\r\n      },\r\n      onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n         const resultAction = await dispatch(authActions.login(values))\r\n\r\n         if (login.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.fieldsErrors?.length) {\r\n               const error = resultAction.payload?.fieldsErrors[0]\r\n               formikHelpers.setFieldError(error.field, error.error)\r\n            }\r\n         }\r\n      },\r\n   })\r\n\r\n   if (isLoggedIn) {\r\n      return <Redirect to={'/'}/>\r\n   }\r\n\r\n\r\n   return <Grid container justify=\"center\">\r\n      <Grid item xs={4}>\r\n         <form onSubmit={formik.handleSubmit}>\r\n            <FormControl>\r\n               <FormLabel>\r\n                  <p>\r\n                     To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                 rel=\"noopener\">here</a>\r\n                  </p>\r\n                  <p>\r\n                     or use common test account credentials:\r\n                  </p>\r\n                  <p> Email: free@samuraijs.com\r\n                  </p>\r\n                  <p>\r\n                     Password: free\r\n                  </p>\r\n               </FormLabel>\r\n               <FormGroup>\r\n                  <TextField\r\n                     label=\"Email\"\r\n                     margin=\"normal\"\r\n                     {...formik.getFieldProps('email')}\r\n                  />\r\n                  {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                  <TextField\r\n                     type=\"password\"\r\n                     label=\"Password\"\r\n                     margin=\"normal\"\r\n                     {...formik.getFieldProps('password')}\r\n                  />\r\n                  {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                  <FormControlLabel\r\n                     label={'Remember me'}\r\n                     control={<Checkbox\r\n                        {...formik.getFieldProps('rememberMe')}\r\n                        checked={formik.values.rememberMe}\r\n                     />}\r\n                  />\r\n                  <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n               </FormGroup>\r\n            </FormControl>\r\n         </form>\r\n      </Grid>\r\n   </Grid>\r\n}\r\n\r\n//types\r\ntype FormValuesType = {\r\n   email: string\r\n   password: string\r\n   rememberMe: boolean\r\n}","import {Login} from './Login'\r\nimport {asyncActions, slice} from './auth-reducer'\r\n\r\nconst authActions = {\r\n   ...asyncActions,\r\n   ...slice.actions\r\n}\r\n\r\nconst authReducer = slice.reducer\r\n\r\nexport {\r\n   Login,\r\n   authActions,\r\n   authReducer\r\n}\r\n","import {authAPI} from '../../api/todolists-api'\r\nimport {authActions} from '../Auth'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {appActions} from '../CommonActions/App'\r\n\r\nconst initializeApp = createAsyncThunk('application/initializeApp', async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(authActions.setIsLoggedIn({value: true}))\r\n    } else {\r\n\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    initializeApp\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(initializeApp.fulfilled, (state, action) => {\r\n                state.isInitialized = true\r\n            })\r\n            .addCase(appActions.setAppStatus, (state, action) => {\r\n                state.status = action.payload.status\r\n            })\r\n            .addCase(appActions.setAppError, (state, action) => {\r\n                state.error = action.payload.error\r\n            })\r\n    }\r\n})\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n","import * as appSelectors from './selectors'\r\nimport {RequestStatusType as T1, slice} from './application-reducer'\r\nimport {asyncActions} from './application-reducer'\r\n\r\nconst appReducer = slice.reducer\r\nconst actions = slice.actions\r\n\r\nconst appActions = {\r\n    ...actions,\r\n    ...asyncActions\r\n}\r\nexport type RequestStatusType = T1\r\n\r\nexport {\r\n    appSelectors,\r\n    appReducer,\r\n    appActions\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {Route} from 'react-router-dom'\r\nimport {\r\n   AppBar,\r\n   Button,\r\n   CircularProgress,\r\n   Container,\r\n   IconButton,\r\n   LinearProgress,\r\n   Toolbar,\r\n   Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\n\r\nimport styles from './App.module.css'\r\nimport {TodolistsList} from '../features/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {appActions} from '../features/Application'\r\nimport {authActions, Login} from '../features/Auth'\r\nimport {selectIsInitialized, selectStatus} from '../features/Application/selectors'\r\nimport {useActions} from '../utils/redux-utils'\r\nimport {selectIsLoggedIn} from '../features/Auth/selectors'\r\n\r\n\r\nfunction App({demo = false}: PropsType) {\r\n   const status = useSelector(selectStatus)\r\n   const isInitialized = useSelector(selectIsInitialized)\r\n   const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n   const {logout} = useActions(authActions)\r\n   const {initializeApp} = useActions(appActions)\r\n\r\n   useEffect(() => {\r\n      if (!demo) {\r\n         initializeApp()\r\n      }\r\n   }, [])\r\n\r\n   const logoutHandler = useCallback(() => {\r\n      logout()\r\n   }, [])\r\n\r\n   if (!isInitialized) {\r\n      return <div\r\n         style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n         <CircularProgress/>\r\n      </div>\r\n   }\r\n\r\n   return (\r\n      <div className=\"App\">\r\n         <ErrorSnackbar/>\r\n         <AppBar position=\"static\">\r\n            <Toolbar>\r\n               <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                  <Menu/>\r\n               </IconButton>\r\n               <div className={styles.header}>\r\n                  <Typography variant=\"h6\">\r\n                     Todos\r\n                  </Typography>\r\n\r\n                  {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n               </div>\r\n            </Toolbar>\r\n            {status === 'loading' && <LinearProgress/>}\r\n         </AppBar>\r\n         <Container fixed>\r\n            <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n            <Route path={'/login'} render={() => <Login/>}/>\r\n         </Container>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default App\r\n\r\n//types\r\ntype PropsType = {\r\n   demo?: boolean\r\n}","import {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {configureStore} from '@reduxjs/toolkit'\r\n\r\nimport {appReducer} from '../features/Application'\r\nimport {authReducer} from '../features/Auth'\r\nimport {tasksReducer, todolistsReducer} from '../features/TodolistsList'\r\n\r\nexport const rootReducer = combineReducers({\r\n   app: appReducer,\r\n   auth: authReducer,\r\n   todolists: todolistsReducer,\r\n   tasks: tasksReducer\r\n})\r\n\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport const store = configureStore({\r\n   reducer: rootReducer,\r\n   middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the appActions load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web appActions is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different appActions. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Application is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport {Provider} from 'react-redux'\r\nimport {BrowserRouter} from 'react-router-dom'\r\n\r\nimport App from './app/App'\r\nimport './index.css'\r\nimport {store} from './app/store'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\n\r\nReactDOM.render(\r\n   <Provider store={store}>\r\n      <BrowserRouter>\r\n         <App/>\r\n      </BrowserRouter>\r\n   </Provider>, document.getElementById('root'))\r\n\r\n\r\nserviceWorker.unregister()\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"App_header__ooUVu\"};"],"sourceRoot":""}
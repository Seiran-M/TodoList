import {v1} from 'uuid'import {ACTIONS_TYPE} from './actions'import {Dispatch} from 'redux'import {todolistsAPI, TodolistType} from '../api/todolists-api'export type TodolistDomainType = TodolistType & {   filter: FilterValuesType}export type FilterValuesType = 'all' | 'active' | 'completed'const initialState: Array<TodolistDomainType> = [   /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0},   {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 0}*/]export type  ActionsType =   RemoveTodolistActionType   | AddTodolistActionType   | ChangeTodolistFilterActionType   | ChangeTodolistTitleActionType   | SetTodolistActionTypeexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {   switch (action.type) {      case ACTIONS_TYPE.SET_TODOLISTS: {         return action.payload.todolists.map((tl) => {            return {...tl, filter: 'all'}         })      }      case ACTIONS_TYPE.REMOVE_TODOLIST: {         return state.filter(tl => tl.id !== action.payload.id)      }      case ACTIONS_TYPE.ADD_TODOLIST: {         return [{            id: action.payload.todolistId,            title: action.payload.title,            filter: 'all',            addedDate: '',            order: 0         }, ...state]      }      case ACTIONS_TYPE.CHANGE_FILTER: {         return state.map(tl => {            if (tl.id === action.payload.id) {               return {...tl, filter: action.payload.filter}            } else return tl         })      }      case ACTIONS_TYPE.CHANGE_TITLE: {         debugger         return state.map(tl => {            if (tl.id === action.payload.id) {               return {...tl, title: action.payload.title}            } else return tl         })      }      default:         return state   }}export const removeTodolistAC = (todolistId: string) =>   ({type: ACTIONS_TYPE.REMOVE_TODOLIST, payload: {id: todolistId}} as const)export type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>export const addTodolistAC = (title: string) =>   ({type: ACTIONS_TYPE.ADD_TODOLIST, payload: {title, todolistId: v1()}} as const)export type AddTodolistActionType = ReturnType<typeof addTodolistAC>export const changeTodolistFilterAC = (filter: FilterValuesType, todolistId: string) =>   ({type: ACTIONS_TYPE.CHANGE_FILTER, payload: {filter: filter, id: todolistId}} as const)type ChangeTodolistFilterActionType = ReturnType<typeof changeTodolistFilterAC>export const changeTodolistTitleAC = (todolistId: string, title: string) =>   ({type: ACTIONS_TYPE.CHANGE_TITLE, payload: {id: todolistId, title: title}} as const)type ChangeTodolistTitleActionType = ReturnType<typeof changeTodolistTitleAC>export const setTodolistsAC = (todolists: Array<TodolistType>) =>   ({type: ACTIONS_TYPE.SET_TODOLISTS, payload: {todolists}} as const)export type SetTodolistActionType = ReturnType<typeof setTodolistsAC>//thunkexport const fetchTodolistsTC = () => (dispatch: Dispatch) => {   todolistsAPI.getTodolists()      .then((res) => {         dispatch(setTodolistsAC(res.data))      })}export const addTodolistTC = (title: string) => (dispatch: Dispatch) => {   todolistsAPI.createTodolist(title)      .then((res) => {         dispatch(addTodolistAC(title))      })}export const removeTodolistTC = (todolistsId: string) => (dispatch: Dispatch) => {   todolistsAPI.deleteTodolist(todolistsId)      .then(() => {         dispatch(removeTodolistAC(todolistsId))      })}export const changeTodolistTitleTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {   todolistsAPI.updateTodolist(todolistId,title)      .then(()=>{         debugger         dispatch(changeTodolistTitleAC(todolistId, title))      })}
import {TasksStateType} from '../App'import {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from './tasks-reducer'import {addTodolistAC, removeTodolistAC} from './todolist-reducer'test('correct task should be deleted from correct array', () => {   const startState: TasksStateType = {      ['todolistID1']: [         {id: '1', title: 'HTML&CSS', isDone: false},         {id: '2', title: 'JS', isDone: true},         {id: '3', title: 'ReactJS', isDone: false},      ],      ['todolistID2']: [         {id: '1', title: 'Bread', isDone: false},         {id: '2', title: 'Milk', isDone: true},         {id: '3', title: 'Coffee', isDone: false},      ],   }   const action = removeTaskAC('2', 'todolistID2')   const endState = tasksReducer(startState, action)   expect(endState['todolistID1'].length).toBe(3)   expect(endState['todolistID2'].length).toBe(2)   expect(endState['todolistID2'].every(t => t.id != '2')).toBeTruthy()})test('correct task should be added to correct array', () => {   const startState: TasksStateType = {      ['todolistID1']: [         {id: '1', title: 'HTML&CSS', isDone: false},         {id: '2', title: 'JS', isDone: true},         {id: '3', title: 'ReactJS', isDone: false},      ],      ['todolistID2']: [         {id: '1', title: 'Bread', isDone: false},         {id: '2', title: 'Milk', isDone: true},         {id: '3', title: 'Coffee', isDone: false},      ],   }   const action = addTaskAC('juice', 'todolistID2')   const endState = tasksReducer(startState,action)   expect(endState['todolistID1'].length).toBe(3)   expect(endState['todolistID2'].length).toBe(4)   expect(endState['todolistID2'][0].id).toBeDefined()   expect(endState['todolistID2'][0].title).toBe('juice')   expect(endState['todolistID2'][0].isDone).toBe(false)})test('status of specified task should be changed', () => {   const startState: TasksStateType = {      ['todolistID1']: [         {id: '1', title: 'HTML&CSS', isDone: false},         {id: '2', title: 'JS', isDone: true},         {id: '3', title: 'ReactJS', isDone: false},      ],      ['todolistID2']: [         {id: '1', title: 'Bread', isDone: false},         {id: '2', title: 'Milk', isDone: true},         {id: '3', title: 'Coffee', isDone: false},      ],   }   const action = changeTaskStatusAC('2', false, 'todolistID2')   const endState = tasksReducer(startState, action)   expect(endState['todolistID2'][1].isDone).toBeFalsy()   expect(endState['todolistID1'][1].isDone).toBeTruthy()})test('title of specified task should be changed', () => {   const startState: TasksStateType = {      ['todolistID1']: [         {id: '1', title: 'HTML&CSS', isDone: false},         {id: '2', title: 'JS', isDone: true},         {id: '3', title: 'ReactJS', isDone: false},      ],      ['todolistID2']: [         {id: '1', title: 'Bread', isDone: false},         {id: '2', title: 'Milk', isDone: true},         {id: '3', title: 'Coffee', isDone: false},      ],   }   const action = changeTaskTitleAC('2', 'Mercedes', 'todolistID2')   const endState = tasksReducer(startState, action)   expect(endState['todolistID2'][1].title).toBe('Mercedes')   expect(endState['todolistID1'][1].title).toBe('JS')})test('new property with new array should be added when new todolist is added', () => {   const startState: TasksStateType = {      ['todolistID1']: [         {id: '1', title: 'HTML&CSS', isDone: false},         {id: '2', title: 'JS', isDone: true},         {id: '3', title: 'ReactJS', isDone: false},      ],      ['todolistID2']: [         {id: '1', title: 'Bread', isDone: false},         {id: '2', title: 'Milk', isDone: true},         {id: '3', title: 'Coffee', isDone: false},      ],   }   const action = addTodolistAC('title no matter')   const endState = tasksReducer(startState, action)   const keys = Object.keys(endState)   const newKey = keys.find(k => k != 'todolistID1' && k != 'todolistID2')   if (!newKey) {      throw Error('new key should be added')   }   expect(keys.length).toBe(3)   expect(endState[newKey]).toStrictEqual([])})test('property width todolistId should be deleted', () => {   const startState: TasksStateType = {      ['todolistID1']: [         {id: '1', title: 'HTML&CSS', isDone: false},         {id: '2', title: 'JS', isDone: true},         {id: '3', title: 'ReactJS', isDone: false},      ],      ['todolistID2']: [         {id: '1', title: 'Bread', isDone: false},         {id: '2', title: 'Milk', isDone: true},         {id: '3', title: 'Coffee', isDone: false},      ],   }   const action = removeTodolistAC('todolistID2')   const endState = tasksReducer(startState, action)   const keys = Object.keys(endState)   expect(keys.length).toBe(1)   expect(endState['todolistID2']).toBeUndefined()})
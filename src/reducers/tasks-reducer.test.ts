import {TasksStateType} from '../AppWithRedux'import {addTaskAC, removeTaskAC, setTasksAC, tasksReducer} from './tasks-reducer'import {TaskStatuses} from '../api/tasks-api'let startState: TasksStateType = {}beforeEach(() => {   startState = {      'todolistId1': [         {            id: '1', title: 'CSS', status: TaskStatuses.New, description: '', completed: false, priority: 1,            startDate: '', deadline: '', todoListId: '', order: 0, addedDate: ''         },         {            id: '2', title: 'JS', status: TaskStatuses.New, description: '', completed: false, priority: 2,            startDate: '', deadline: '', todoListId: '', order: 0, addedDate: ''         },         {            id: '3', title: 'React', status: TaskStatuses.New, description: '', completed: false, priority: 3,            startDate: '', deadline: '', todoListId: '', order: 0, addedDate: ''         },      ],      'todolistId2': [         {            id: '1', title: 'Bread', status: TaskStatuses.New, description: '', completed: false, priority: 1,            startDate: '', deadline: '', todoListId: '', order: 0, addedDate: ''         },         {            id: '2', title: 'Milk', status: TaskStatuses.New, description: '', completed: false, priority: 2,            startDate: '', deadline: '', todoListId: '', order: 0, addedDate: ''         },         {            id: '3', title: 'Tea', status: TaskStatuses.New, description: '', completed: false, priority: 3,            startDate: '', deadline: '', todoListId: '', order: 0, addedDate: ''         },      ],   }})test('correct task should be deleted from correct array', () => {   const action = removeTaskAC('2', 'todolistID2')   const endState = tasksReducer(startState, action)   expect(endState['todolistID1'].length).toBe(3)   expect(endState['todolistID2'].length).toBe(2)   expect(endState['todolistID2'].every(t => t.id != '2')).toBeTruthy()})test('correct task should be added to correct array', () => {   const action = addTaskAC({      todoListId: 'todolistId2',      title: 'juice',      status: TaskStatuses.New,      addedDate: '',      id: 'exist',      deadline: '',      order: 0,      description: '',      priority: 0,      completed: false,      startDate: ''   })   const endState = tasksReducer(startState, action)   expect(endState['todolistID1'].length).toBe(3)   expect(endState['todolistID2'].length).toBe(4)   expect(endState['todolistID2'][0].id).toBeDefined()   expect(endState['todolistID2'][0].title).toBe('juice')   expect(endState['todolistID2'][0].status).toBe(TaskStatuses.New)})// test('status of specified task should be changed', () => {//    const startState: TasksStateType = {//       ['todolistID1']: [//          {id: '1', title: 'HTML&CSS', isDone: false},//          {id: '2', title: 'JS', isDone: true},//          {id: '3', title: 'ReactJS', isDone: false},////       ],//       ['todolistID2']: [//          {id: '1', title: 'Bread', isDone: false},//          {id: '2', title: 'Milk', isDone: true},//          {id: '3', title: 'Coffee', isDone: false},//       ],//    }////    const action = changeTaskStatusAC('2', false, 'todolistID2')//    const endState = tasksReducer(startState, action)////    expect(endState['todolistID2'][1].isDone).toBeFalsy()//    expect(endState['todolistID1'][1].isDone).toBeTruthy()//// })//// test('title of specified task should be changed', () => {//    const startState: TasksStateType = {//       ['todolistID1']: [//          {id: '1', title: 'HTML&CSS', isDone: false},//          {id: '2', title: 'JS', isDone: true},//          {id: '3', title: 'ReactJS', isDone: false},////       ],//       ['todolistID2']: [//          {id: '1', title: 'Bread', isDone: false},//          {id: '2', title: 'Milk', isDone: true},//          {id: '3', title: 'Coffee', isDone: false},//       ],//    }////    const action = changeTaskTitleAC('2', 'Mercedes', 'todolistID2')//    const endState = tasksReducer(startState, action)////    expect(endState['todolistID2'][1].title).toBe('Mercedes')//    expect(endState['todolistID1'][1].title).toBe('JS')// })//// test('new property with new array should be added when new todolist is added', () => {//    const startState: TasksStateType = {//       ['todolistID1']: [//          {id: '1', title: 'HTML&CSS', isDone: false},//          {id: '2', title: 'JS', isDone: true},//          {id: '3', title: 'ReactJS', isDone: false},////       ],//       ['todolistID2']: [//          {id: '1', title: 'Bread', isDone: false},//          {id: '2', title: 'Milk', isDone: true},//          {id: '3', title: 'Coffee', isDone: false},//       ],//    }////    const action = addTodolistAC('title no matter')//    const endState = tasksReducer(startState, action)////    const keys = Object.keys(endState)//    const newKey = keys.find(k => k != 'todolistID1' && k != 'todolistID2')//    if (!newKey) {//       throw Error('new key should be added')//    }////    expect(keys.length).toBe(3)//    expect(endState[newKey]).toStrictEqual([])// })//// test('property width todolistId should be deleted', () => {//    const startState: TasksStateType = {//       ['todolistID1']: [//          {id: '1', title: 'HTML&CSS', isDone: false},//          {id: '2', title: 'JS', isDone: true},//          {id: '3', title: 'ReactJS', isDone: false},////       ],//       ['todolistID2']: [//          {id: '1', title: 'Bread', isDone: false},//          {id: '2', title: 'Milk', isDone: true},//          {id: '3', title: 'Coffee', isDone: false},//       ],//    }////    const action = removeTodolistAC('todolistID2')//    const endState = tasksReducer(startState, action)////    const keys = Object.keys(endState)////    expect(keys.length).toBe(1)//    expect(endState['todolistID2']).toBeUndefined()// })//// test('empty arrays should be added when we set todolists', ()=>{////    const action = setTodolistsAC([//       {id:'1', title: 'title 1', order: 0, addedDate: ''},//       {id:'2', title: 'title 2', order: 0, addedDate: ''}//    ])////    const endState = tasksReducer({}, action)////    const keys = Object.keys(endState)////    expect(keys.length).toBe(2)//    expect(endState['1']).toStrictEqual([])//    expect(endState['2']).toStrictEqual([])// })test('tasks should be added to todolist', () => {   const action = setTasksAC(startState['todolistId1'], 'todolistId1')   const endState = tasksReducer({      'todolistId2': [],      'todolistId1': []   }, action)   expect(endState['todolistId1'].length).toBe(3)   expect(endState['todolistId2'].length).toBe(0)})
import {TasksStateType} from '../App'import {v1} from 'uuid'import {REMOVE_TODOLIST, ADD_TODOLIST, AddTodolistActionType, RemoveTodolistActionType,} from './todolist-reducer'export const REMOVE_TASK = 'REMOVE-TASK'export const ADD_TASK = 'ADD-TASK'export const CHANGE_TASK_STATUS = 'CHANGE-TASK-STATUS'export const CHANGE_TASK_TITLE = 'CHANGE-TASK-TITLE'type RemoveTaskActionType = {   type: typeof REMOVE_TASK   todolistId: string   taskId: string}type AddTaskActionType = {   type: typeof ADD_TASK   title: string   todolistId: string}type ChangeTaskStatusActionType = {   type: typeof CHANGE_TASK_STATUS   taskId: string   todolistId: string   isDone: boolean}type ChangeTaskTitleActionType = {   type: typeof CHANGE_TASK_TITLE   taskId: string   todolistId: string   title: string}export type  ActionsType =   RemoveTaskActionType   | AddTaskActionType   | ChangeTaskStatusActionType   | ChangeTaskTitleActionType   | AddTodolistActionType | RemoveTodolistActionTypeconst initialState: TasksStateType = {}export const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {   switch (action.type) {      case REMOVE_TASK: {         const stateCopy = {...state}         const tasks = stateCopy[action.todolistId]         const filteredTasks = tasks.filter(t => t.id !== action.taskId)         stateCopy[action.todolistId] = filteredTasks         return stateCopy      }      case ADD_TASK : {         const stateCopy = {...state}         const tasks = stateCopy[action.todolistId]         const newTask = {id: v1(), title: action.title, isDone: false}         const newTasks = [newTask, ...tasks]         stateCopy[action.todolistId] = newTasks         return stateCopy      }      case CHANGE_TASK_STATUS: {         const stateCopy = {...state}         const todolistTasks = stateCopy[action.todolistId]         const task = todolistTasks.find(t => t.id === action.taskId)         if (task) {            task.isDone = action.isDone         }         return {            ...state,            [action.todolistId]: state[action.todolistId].map(task => {               if (task.id === action.taskId) {                  return {...task, isDone: action.isDone}               } else {                  return task               }            })         }      }      case CHANGE_TASK_TITLE: {         const stateCopy = {...state}         const tasks = stateCopy[action.todolistId]         const task = tasks.find(t => t.id === action.taskId)         if (task) {            task.title = action.title         }         return {            ...state,            [action.todolistId]: state[action.todolistId].map(task => {               if (task.id === action.taskId) {                  return {...task, title: action.title}               } else {                  return task               }            })         }      }      case ADD_TODOLIST: {         const stateCopy = {...state}         stateCopy[action.todolistId] = []         return stateCopy      }      case REMOVE_TODOLIST: {         const stateCopy = {...state}         delete stateCopy[action.id]         return stateCopy      }      default:         return state   }}export const removeTaskAC = (taskID: string, todolistID: string): RemoveTaskActionType => {   return {type: REMOVE_TASK, todolistId: todolistID, taskId: taskID}}export const addTaskAC = (title: string, todolistID: string): AddTaskActionType => {   return {type: ADD_TASK, title, todolistId: todolistID}}export const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistID: string): ChangeTaskStatusActionType => {   return {type: CHANGE_TASK_STATUS, taskId: taskId, isDone, todolistId: todolistID}}export const changeTaskTitleAC = (taskId: string, title: string, todolistID: string): ChangeTaskTitleActionType => {   return {type: CHANGE_TASK_TITLE, taskId, title, todolistId: todolistID}}
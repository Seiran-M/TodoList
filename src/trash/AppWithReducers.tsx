import React, {useReducer} from 'react'import '../app/App.css'import {Todolist} from '../features/TodolistsList/Todolist/Todolist'import {AddItemForm} from '../components/AddItemForm/AddItemForm'import {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core'import {Menu} from '@material-ui/icons'import {   addTodolistAC,   changeTodolistFilterAC,   changeTodolistTitleAC,   removeTodolistAC,   todolistsReducer} from '../state/reducers/todolists-reducer'import {addTaskAC, removeTaskAC, tasksReducer, updateTaskAC} from '../state/reducers/tasks-reducer'import {TaskPriorities, TaskStatuses} from '../api/tasks-api'import {v1} from 'uuid'export type FilterValuesType = 'all' | 'active' | 'completed'export const AppWithReducers: React.FC = () => {   const todolistId1 = v1()   const todolistId2 = v1()   const [todolists, dispatchToTodolistsReducer] = useReducer(todolistsReducer, [      {id: todolistId1, addedDate: '', order: 0, title: 'What to learn', filter: 'all', entityStatus: 'idle'},      {id: todolistId2, addedDate: '', order: 0, title: 'What to bye', filter: 'all', entityStatus: 'idle'}   ])   const [tasksObj, dispatchToTaskReducer] = useReducer(tasksReducer,  {      'todolistId1': [         {id: '1', title: 'CSS', status: TaskStatuses.New, description: '', priority: 1,            startDate: '', deadline: '', todoListId: '', order: 0, addedDate: '', entityStatus: 'idle'},         {id: '2', title: 'JS', status: TaskStatuses.New, description: '', priority: 2,            startDate: '', deadline: '', todoListId: '', order: 0, addedDate: '', entityStatus: 'idle'},         {id: '3', title: 'React', status: TaskStatuses.New, description: '', priority: 3,            startDate: '', deadline: '', todoListId: '', order: 0, addedDate: '', entityStatus: 'idle'},      ],      'todolistId2': [         {id: '1', title: 'Bread', status: TaskStatuses.New, description: '', priority: 1,            startDate: '', deadline: '', todoListId: '', order: 0, addedDate: '', entityStatus: 'idle'},         {id: '2', title: 'Milk', status: TaskStatuses.New, description: '', priority: 2,            startDate: '', deadline: '', todoListId: '', order: 0, addedDate: '', entityStatus: 'idle'},         {id: '3', title: 'Tea', status: TaskStatuses.New, description: '', priority: 3,            startDate: '', deadline: '', todoListId: '', order: 0, addedDate: '', entityStatus: 'idle'},      ],   })   // Function for todolist:   function addTodolist(title: string) {      const action = addTodolistAC({todolist:{            id: v1(),            title:title,            order:0,            addedDate:'',         }})      dispatchToTaskReducer(action)      dispatchToTodolistsReducer(action)   }   function removeTodolist(todolistId: string) {      const action = removeTodolistAC({id: todolistId})      dispatchToTodolistsReducer(action)      dispatchToTaskReducer(action)   }   function changeFilter(newFilterValue: FilterValuesType, todolistId: string) {      dispatchToTodolistsReducer(changeTodolistFilterAC({filter: newFilterValue, id: todolistId}))   }   function changeTodolistTitle(newTitle: string, todolistId: string) {      dispatchToTodolistsReducer(changeTodolistTitleAC({title: newTitle, id: todolistId}))   }   // Function for tasks:   function removeTask(taskId: string, todolistId: string) {      dispatchToTaskReducer(removeTaskAC({taskId, todolistId}))   }   function addTask(taskTitle: string, todolistId: string) {      dispatchToTaskReducer(addTaskAC({task: {            description: '',            title: taskTitle,            status: TaskStatuses.New,            priority: TaskPriorities.Low,            startDate: '',            deadline: '',            id: 'exist',            todoListId: todolistId,            order: 0,            addedDate: '',            entityStatus: 'idle',         }}))   }   function changeTaskStatus(taskId: string, status: TaskStatuses, todolistId: string) {      dispatchToTaskReducer(updateTaskAC({taskId,model:{status},todolistId}))   }   function changeTaskTitle(taskId: string, newTitle: string, todolistId: string) {      dispatchToTaskReducer(updateTaskAC({taskId, model:{title: newTitle}, todolistId}))   }   return (      <div className="App">         <AppBar position="static">            <Toolbar>               <IconButton edge="start" color="inherit" aria-label="menu">                  <Menu/>               </IconButton>               <Typography variant="h6">                  News               </Typography>               <Button color="inherit">Login</Button>            </Toolbar>         </AppBar>         <Container fixed>            <Grid container style={{margin: '20px'}}>               <AddItemForm addItem={addTodolist}/>               <Grid container spacing={3}>                  {                     todolists.map(tl => {                        let tasksForTodolist = tasksObj[tl.id]                        if (tl.filter === 'active') {                           tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.New)                        }                        if (tl.filter === 'completed') {                           tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.Completed)                        }                        return (                           <Grid item>                              <Paper style={{padding: '15px'}}>                                 <Todolist                                    key={tl.id}                                    id={tl.id}                                    title={tl.title}                                    entityStatus={tl.entityStatus}                                    tasks={tasksForTodolist}                                    removeTodolist={removeTodolist}                                    removeTask={removeTask}                                    changeFilter={changeFilter}                                    addTask={addTask}                                    changeTaskStatus={changeTaskStatus}                                    changeTaskTitle={changeTaskTitle}                                    filter={tl.filter}                                    changeTodolistTitle={changeTodolistTitle}                                 />                              </Paper>                           </Grid>                        )                     })                  }               </Grid>            </Grid>         </Container>      </div>   )}
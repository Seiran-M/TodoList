import {ACTIONS_TYPE} from '../../state/reducers/actions'import {Dispatch} from 'redux'import {todolistsAPI, TodolistType} from '../../api/todolists-api'import {TaskType} from '../../api/tasks-api'const initialState: Array<TodolistDomainType> = []export const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {   switch (action.type) {      case ACTIONS_TYPE.SET_TODOLISTS:         return action.payload.todolists.map((tl) =>  ({...tl, filter: 'all'}))      case ACTIONS_TYPE.REMOVE_TODOLIST:         return state.filter(tl => tl.id !== action.payload.id)      case ACTIONS_TYPE.ADD_TODOLIST:         return [{...action.payload.todolist, filter: 'all'}, ...state]      case ACTIONS_TYPE.CHANGE_FILTER:         return state.map(tl => tl.id === action.payload.id ? {...tl, filter: action.payload.filter} : tl)      case ACTIONS_TYPE.CHANGE_TITLE:         return state.map(tl => tl.id === action.payload.id ? {...tl, title: action.payload.title} : tl)      default:         return state   }}// actionsexport const removeTodolistAC = (id: string) =>   ({type: ACTIONS_TYPE.REMOVE_TODOLIST, payload: {id}} as const)export const addTodolistAC = (todolist: TodolistType) =>   ({type: ACTIONS_TYPE.ADD_TODOLIST, payload: {todolist}} as const)export const changeTodolistFilterAC = (filter: FilterValuesType, id: string) =>   ({type: ACTIONS_TYPE.CHANGE_FILTER, payload: {filter: filter, id}} as const)export const changeTodolistTitleAC = (id: string, title: string) =>   ({type: ACTIONS_TYPE.CHANGE_TITLE, payload: {id, title}} as const)export const setTodolistsAC = (todolists: Array<TodolistType>) =>   ({type: ACTIONS_TYPE.SET_TODOLISTS, payload: {todolists}} as const)// thunksexport const fetchTodolistsTC = () => (dispatch: Dispatch<ActionsType>) => {   todolistsAPI.getTodolists()      .then((res) => {         dispatch(setTodolistsAC(res.data))      })}export const addTodolistTC = (title: string) => (dispatch: Dispatch<ActionsType>) => {   todolistsAPI.createTodolist(title)      .then((res) => {         dispatch(addTodolistAC(res.data.data.item))      })}export const removeTodolistTC = (todolistsId: string) => (dispatch: Dispatch<ActionsType>) => {   todolistsAPI.deleteTodolist(todolistsId)      .then(() => {         dispatch(removeTodolistAC(todolistsId))      })}export const changeTodolistTitleTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {   todolistsAPI.updateTodolist(todolistId, title)      .then(() => {         debugger         dispatch(changeTodolistTitleAC(todolistId, title))      })}// typesexport type TasksStateType = { [key: string]: Array<TaskType> }export type TodolistDomainType = TodolistType & { filter: FilterValuesType }export type FilterValuesType = 'all' | 'active' | 'completed'export type  ActionsType =   ReturnType<typeof removeTodolistAC>   | ReturnType<typeof addTodolistAC>   | ReturnType<typeof changeTodolistFilterAC>   | ReturnType<typeof changeTodolistTitleAC>   | ReturnType<typeof setTodolistsAC>
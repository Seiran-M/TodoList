import React, {useCallback, useEffect} from 'react'import {useDispatch, useSelector} from 'react-redux'import {Redirect} from 'react-router-dom'import {Grid, Paper} from '@material-ui/core'import {AppRootStateType} from '../../state/store'import {   addTodolistTC,   changeTodolistFilterAC,   changeTodolistTitleTC,   fetchTodolistsTC,   removeTodolistTC,   TasksStateType,   TodolistDomainType} from '../../state/reducers/todolists-reducer'import {FilterValuesType} from '../../state/reducers/todolist-reducer.test'import {addTaskTC, deleteTaskTC, updateTaskTC} from '../../state/reducers/tasks-reducer'import {TaskStatuses} from '../../api/tasks-api'import {AddItemForm} from '../../components/AddItemForm/AddItemForm'import {Todolist} from './Todolist/Todolist'export const TodolistsList: React.FC = () => {   const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)   const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)   const isLoggedIn = useSelector<AppRootStateType>((state)=>state.auth.isLoggedIn)   const dispatch = useDispatch()   useEffect(() => {      if (!isLoggedIn){         return      }      dispatch(fetchTodolistsTC())   }, [dispatch])   // Functions for todolist:   const addTodolist = useCallback((title: string) => {      dispatch(addTodolistTC(title))   }, [dispatch])   const removeTodolist = useCallback((todolistId: string) => {      dispatch(removeTodolistTC(todolistId))   }, [dispatch])   const changeFilter = useCallback((newFilterValue: FilterValuesType, todolistId: string) => {      dispatch(changeTodolistFilterAC({filter: newFilterValue, id: todolistId}))   }, [dispatch])   const changeTodolistTitle = useCallback((todolistId: string, newTitle: string) => {      dispatch(changeTodolistTitleTC(todolistId, newTitle))   }, [dispatch])   // Functions for tasks:   const removeTask = useCallback((todolistId: string, taskId: string) => {      dispatch(deleteTaskTC(todolistId, taskId))   }, [dispatch])   const addTask = useCallback((title: string, todolistId: string) => {      dispatch(addTaskTC(todolistId, title))   }, [dispatch])   const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses, todolistId: string) => {      dispatch(updateTaskTC(taskId, {status}, todolistId))   }, [dispatch])   const changeTaskTitle = useCallback((taskId: string, title: string, todolistId: string) => {      dispatch(updateTaskTC(taskId, {title}, todolistId))   }, [dispatch])   if (!isLoggedIn){      return <Redirect to={"/login"}/>   }   return (      <Grid container style={{margin: '20px'}}>         <AddItemForm addItem={addTodolist}/>         <Grid container spacing={3}>            {               todolists.map(tl => {                  let tasksForTodolist = tasks[tl.id]                  return (                     <Grid item key={tl.id}>                        <Paper style={{padding: '15px'}}>                           <Todolist                              key={tl.id}                              id={tl.id}                              title={tl.title}                              entityStatus={tl.entityStatus}                              tasks={tasksForTodolist}                              removeTodolist={removeTodolist}                              removeTask={removeTask}                              changeFilter={changeFilter}                              addTask={addTask}                              changeTaskStatus={changeTaskStatus}                              changeTaskTitle={changeTaskTitle}                              filter={tl.filter}                              changeTodolistTitle={changeTodolistTitle}                           />                        </Paper>                     </Grid>                  )               })            }         </Grid>      </Grid>   )}
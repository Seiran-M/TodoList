import {addTaskAC, removeTaskAC, setTasksAC, tasksReducer, updateTaskAC} from './tasks-reducer'import {TaskPriorities, TaskStatuses} from '../../api/tasks-api'import {addTodolistAC, removeTodolistAC, setTodolistsAC, TasksStateType} from './todolists-reducer'let startState: TasksStateType = {}beforeEach(() => {   startState = {      'todolistId1': [         {id: '1', title: 'CSS', status: TaskStatuses.New, description: '', priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId1', order: 0, addedDate: ''},         {id: '2', title: 'JS', status: TaskStatuses.New, description: '', priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId1', order: 0, addedDate: ''},         {id: '3', title: 'React', status: TaskStatuses.New, description: '', priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId1', order: 0, addedDate: ''}      ],      'todolistId2': [         {id: '1', title: 'Bread', status: TaskStatuses.New, description: '',  priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId2', order: 0, addedDate: ''},         {id: '2', title: 'Milk', status: TaskStatuses.New, description: '', priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId2', order: 0, addedDate: ''},         {id: '3', title: 'Tea', status: TaskStatuses.New, description: '',  priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId2', order: 0, addedDate: ''}      ]   }})test('correct task should be deleted from correct array', () => {   const action = removeTaskAC('todolistId2', '2')   const endState = tasksReducer(startState, action)   expect(endState['todolistId1'].length).toBe(3)   expect(endState['todolistId2'].length).toBe(2)   expect(endState['todolistId2'].every(t => t.id != '2')).toBeTruthy()})test('correct task should be added to correct array', () => {   const action = addTaskAC({      todoListId: 'todolistId2',      title: 'juice',      status: TaskStatuses.New,      addedDate: '',      id: 'exist',      deadline: '',      order: 0,      description: '',      priority: 0,      startDate: ''   })   const endState = tasksReducer(startState, action)   expect(endState['todolistId1'].length).toBe(3)   expect(endState['todolistId2'].length).toBe(4)   expect(endState['todolistId2'][0].id).toBeDefined()   expect(endState['todolistId2'][0].title).toBe('juice')   expect(endState['todolistId2'][0].status).toBe(TaskStatuses.New)})test('status of specified task should be changed', () => {   startState = {      'todolistId1': [         {id: '1', title: 'CSS', status: TaskStatuses.New, description: '', priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId1', order: 0, addedDate: ''},         {id: '2', title: 'JS', status: TaskStatuses.New, description: '', priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId1', order: 0, addedDate: ''},         {id: '3', title: 'React', status: TaskStatuses.New, description: '', priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId1', order: 0, addedDate: ''}      ],      'todolistId2': [         {id: '1', title: 'Bread', status: TaskStatuses.New, description: '',  priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId2', order: 0, addedDate: ''},         {id: '2', title: 'Milk', status: TaskStatuses.New, description: '', priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId2', order: 0, addedDate: ''},         {id: '3', title: 'Tea', status: TaskStatuses.New, description: '',  priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId2', order: 0, addedDate: ''}      ]   }   const action = updateTaskAC('2', {status: TaskStatuses.Completed} ,'todolistId2')   const endState = tasksReducer(startState, action)   expect(endState['todolistId2'][1].status).toBe(TaskStatuses.Completed)   expect(endState['todolistId1'][1].status).toBe(TaskStatuses.New)})test('title of specified task should be changed', () => {   startState = {      'todolistId1': [         {id: '1', title: 'CSS', status: TaskStatuses.New, description: '', priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId1', order: 0, addedDate: ''},         {id: '2', title: 'JS', status: TaskStatuses.New, description: '', priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId1', order: 0, addedDate: ''},         {id: '3', title: 'React', status: TaskStatuses.New, description: '', priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId1', order: 0, addedDate: ''}      ],      'todolistId2': [         {id: '1', title: 'Bread', status: TaskStatuses.New, description: '',  priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId2', order: 0, addedDate: ''},         {id: '2', title: 'Milk', status: TaskStatuses.New, description: '', priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId2', order: 0, addedDate: ''},         {id: '3', title: 'Tea', status: TaskStatuses.New, description: '',  priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId2', order: 0, addedDate: ''}      ]   }   const action = updateTaskAC('2', {title:'Mercedes'}, 'todolistId2')   const endState = tasksReducer(startState, action)   expect(endState['todolistId2'][1].title).toBe('Mercedes')   expect(endState['todolistId1'][1].title).toBe('JS')})test('new property with new array should be added when new todolist is added', () => {   startState = {      'todolistId1': [         {id: '1', title: 'CSS', status: TaskStatuses.New, description: '', priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId1', order: 0, addedDate: ''},         {id: '2', title: 'JS', status: TaskStatuses.New, description: '', priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId1', order: 0, addedDate: ''},         {id: '3', title: 'React', status: TaskStatuses.New, description: '', priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId1', order: 0, addedDate: ''}      ],      'todolistId2': [         {id: '1', title: 'Bread', status: TaskStatuses.New, description: '',  priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId2', order: 0, addedDate: ''},         {id: '2', title: 'Milk', status: TaskStatuses.New, description: '', priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId2', order: 0, addedDate: ''},         {id: '3', title: 'Tea', status: TaskStatuses.New, description: '',  priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId2', order: 0, addedDate: ''}      ]   }   const action = addTodolistAC({ id:'todolistId3', title:'New title', addedDate: '', order: 1})   const endState = tasksReducer(startState, action)   const keys = Object.keys(endState)   const newKey = keys.find(k => k != 'todolistId1' && k != 'todolistId2')   if (!newKey) {      throw Error('new key should be added')   }   expect(keys.length).toBe(3)   expect(endState[newKey]).toStrictEqual([])})test('property width todolistId should be deleted', () => {   startState = {      'todolistId1': [         {id: '1', title: 'CSS', status: TaskStatuses.New, description: '', priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId1', order: 0, addedDate: ''},         {id: '2', title: 'JS', status: TaskStatuses.New, description: '', priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId1', order: 0, addedDate: ''},         {id: '3', title: 'React', status: TaskStatuses.New, description: '', priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId1', order: 0, addedDate: ''}      ],      'todolistId2': [         {id: '1', title: 'Bread', status: TaskStatuses.New, description: '',  priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId2', order: 0, addedDate: ''},         {id: '2', title: 'Milk', status: TaskStatuses.New, description: '', priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId2', order: 0, addedDate: ''},         {id: '3', title: 'Tea', status: TaskStatuses.New, description: '',  priority: TaskPriorities.Low,            startDate: '', deadline: '', todoListId: 'todolistId2', order: 0, addedDate: ''}      ]   }   const action = removeTodolistAC('todolistId2')   const endState = tasksReducer(startState, action)   const keys = Object.keys(endState)   expect(keys.length).toBe(1)   expect(endState['todolistID2']).toBeUndefined()})test('empty arrays should be added when we set todolists', ()=>{   const action = setTodolistsAC([      {id:'1', title: 'title 1', order: 0, addedDate: ''},      {id:'2', title: 'title 2', order: 0, addedDate: ''}   ])   const endState = tasksReducer({}, action)   const keys = Object.keys(endState)   expect(keys.length).toBe(2)   expect(endState['1']).toStrictEqual([])   expect(endState['2']).toStrictEqual([])})test('tasks should be added to todolist', () => {   const action = setTasksAC(startState['todolistId1'], 'todolistId1')   const endState = tasksReducer({      'todolistId2': [],      'todolistId1': []   }, action)   expect(endState['todolistId1'].length).toBe(3)   expect(endState['todolistId2'].length).toBe(0)})
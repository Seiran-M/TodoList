import {addTodolistAC, removeTodolistAC, setTodolistsAC, TasksStateType} from './todolists-reducer'import {ACTIONS_TYPE} from '../../state/reducers/actions'import {Dispatch} from 'redux'import {AppRootStateType} from '../../app/store'import {TaskPriorities, tasksAPI, TaskStatuses, TaskType, UpdateTaskModelType} from '../../api/tasks-api'const initialState: TasksStateType = {}export const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {   switch (action.type) {      case ACTIONS_TYPE.REMOVE_TASK:         return {...state, [action.payload.todolistId]: state[action.payload.todolistId]               .filter(t => t.id !== action.payload.taskId)}      case ACTIONS_TYPE.ADD_TASK :         return {...state, [action.payload.task.todoListId] : [action.payload.task, ...state[action.payload.task.todoListId]]}      case ACTIONS_TYPE.UPDATE_TASK:         return {...state, [action.payload.todolistId] : state[action.payload.todolistId]               .map(t => t.id === action.payload.taskId ? {...t, ...action.payload.model} : t)}      case ACTIONS_TYPE.ADD_TODOLIST:         return {...state, [action.payload.todolist.id]: []}      case ACTIONS_TYPE.REMOVE_TODOLIST:         const stateCopy = {...state}         delete stateCopy[action.payload.id]         return stateCopy      case ACTIONS_TYPE.SET_TODOLISTS: {         const stateCopy = {...state}         action.payload.todolists.forEach((tl) => {            stateCopy[tl.id] = []         })         return stateCopy      }      case ACTIONS_TYPE.SET_TASKS:         return  {...state, [action.todolistId] : action.tasks}      default:         return state   }}// actionsexport const removeTaskAC = (todolistId: string, taskId: string) =>   ({type: ACTIONS_TYPE.REMOVE_TASK, payload: {todolistId, taskId}} as const)export const addTaskAC = (task: TaskType) =>   ({type: ACTIONS_TYPE.ADD_TASK, payload: {task}} as const)export const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>   ({type: ACTIONS_TYPE.UPDATE_TASK, payload: {taskId, model, todolistId}} as const)export const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>   ({type: ACTIONS_TYPE.SET_TASKS, tasks, todolistId} as const)// thunksexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {   tasksAPI.getTasks(todolistId)      .then((res) => {         const tasks = res.data.items         dispatch(setTasksAC(tasks, todolistId))      })}export const deleteTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch<ActionsType>) => {   tasksAPI.deleteTask(todolistId, taskId)      .then(() => {         const action = removeTaskAC(todolistId, taskId)         dispatch(action)      })}export const addTaskTC = (todolistId: string, taskTitle: string) => (dispatch: Dispatch<ActionsType>) => {   tasksAPI.createTask(todolistId, taskTitle)      .then((res) => {         dispatch(addTaskAC(res.data.data.item))      })}export const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>   (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {   const state = getState()   const task = state.tasks[todolistId].find(t => t.id === taskId)   if (!task) {      console.warn('task not found in the state')      return   }   const apiModel: UpdateTaskModelType = {      title: task.title,      startDate: task.startDate,      priority: task.priority,      description: task.description,      deadline: task.deadline,      status: task.status,      ...domainModel   }   tasksAPI.updateTask(todolistId, taskId, apiModel)      .then((res) => {         dispatch(updateTaskAC(taskId, domainModel, todolistId))      })}// typestype UpdateDomainTaskModelType = {   title?: string   description?: string   status?: TaskStatuses   priority?: TaskPriorities   startDate?: string   deadline?: string}export type  ActionsType =   ReturnType<typeof removeTaskAC>   | ReturnType<typeof addTaskAC>   | ReturnType<typeof updateTaskAC>   | ReturnType<typeof addTodolistAC>   | ReturnType<typeof removeTodolistAC>   | ReturnType<typeof setTasksAC>   | ReturnType<typeof setTodolistsAC>
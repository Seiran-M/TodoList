import React, {useState} from 'react'import './App.css'import {Todolist} from './components/Todolist/Todolist'import {v1} from 'uuid'import {AddItemForm} from './components/AddItemForm/AddItemForm'import {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core'import {Menu} from '@material-ui/icons'import {TaskStatuses, TaskType} from './api/tasks-api'import {FilterValuesType, TodolistType} from './api/todolists-api'// export type TodolistType = {//    id: string//    title: string//    filter: FilterValuesType// }export type TasksStateType = {   [key: string]: Array<TaskType>}export const App: React.FC = () => {   const todolistId1 = v1()   const todolistId2 = v1()   const [todolists, setTodolists] = useState<Array<TodolistType>>([      {id: todolistId1, addedDate: '', order: 0, title: 'What to learn', filter: 'all'},      {id: todolistId2, addedDate: '', order: 0, title: 'What to bye', filter: 'all'}   ])   const [tasksObj, setTasks] = useState<TasksStateType>({      'todolistId1': [         {            id: '1', title: 'CSS', status: TaskStatuses.New, description: '', completed: false, priority: 1,            startDate: '', deadline: '', todoListId: '', order: 0, addedDate: ''         },         {            id: '2', title: 'JS', status: TaskStatuses.New, description: '', completed: false, priority: 2,            startDate: '', deadline: '', todoListId: '', order: 0, addedDate: ''         },         {            id: '3', title: 'React', status: TaskStatuses.New, description: '', completed: false, priority: 3,            startDate: '', deadline: '', todoListId: '', order: 0, addedDate: ''         },      ],      'todolistId2': [         {            id: '1', title: 'Bread', status: TaskStatuses.New, description: '', completed: false, priority: 1,            startDate: '', deadline: '', todoListId: '', order: 0, addedDate: ''         },         {            id: '2', title: 'Milk', status: TaskStatuses.New, description: '', completed: false, priority: 2,            startDate: '', deadline: '', todoListId: '', order: 0, addedDate: ''         },         {            id: '3', title: 'Tea', status: TaskStatuses.New, description: '', completed: false, priority: 3,            startDate: '', deadline: '', todoListId: '', order: 0, addedDate: ''         },      ],   })   // Function for todolist:   function addTodolist(title: string) {      const newTodoListId = v1()      const newTodolist: TodolistType = {id: newTodoListId, addedDate: '', order: 0, title: title, filter:'all'}      setTodolists([newTodolist, ...todolists])      setTasks({...tasksObj, [newTodoListId]: []})   }   function removeTodolist(todolistId: string) {      setTodolists(todolists.filter(tl => tl.id !== todolistId))      delete tasksObj[todolistId]      setTasks({...tasksObj})   }   function changeFilter(newFilterValue: FilterValuesType, todolistId: string) {      const todolist = todolists.find(tl => tl.id === todolistId)      if (todolist) {         todolist.filter = newFilterValue         setTodolists([...todolists])      }   }   function changeTodolistTitle(todolistId: string, newTitle: string) {      const todolist = todolists.find(tl => tl.id === todolistId)      if (todolist) {         todolist.title = newTitle         setTodolists([...todolists])      }   }   // Function for tasks:   function removeTask(taskId: string, todolistId: string) {      const todolistTask = tasksObj[todolistId]      tasksObj[todolistId] = todolistTask.filter(t => t.id !== taskId)      setTasks({...tasksObj})   }   function addTask(taskTitle: string, todolistId: string) {      let newTask = {         id: '1', title: taskTitle, status: TaskStatuses.New, description: '', completed: false, priority: 1,         startDate: '', deadline: '', todoListId: todolistId, order: 0, addedDate: ''      }      const todolistTask = tasksObj[todolistId]      tasksObj[todolistId] = [newTask, ...todolistTask]      setTasks({...tasksObj})   }   // function changeTaskStatus(taskId: string, isDone: boolean, todolistId: string) {   function changeTaskStatus(taskId: string, status: TaskStatuses, todolistId: string) {      const todolistTasks = tasksObj[todolistId]      const task: TaskType | undefined = todolistTasks.find(t => t.id === taskId)      if (task) {         task.status = TaskStatuses.Completed         setTasks({...tasksObj})      }   }   function changeTaskTitle(taskId: string, newTitle: string, todolistID: string) {      const todolistTasks = tasksObj[todolistID]      const task: TaskType | undefined = todolistTasks.find(t => t.id === taskId)      if (task) {         task.title = newTitle         setTasks({...tasksObj})      }   }   return (      <div className="App">         <AppBar position="static">            <Toolbar>               <IconButton edge="start" color="inherit" aria-label="menu">                  <Menu/>               </IconButton>               <Typography variant="h6">                  News               </Typography>               <Button color="inherit">Login</Button>            </Toolbar>         </AppBar>         <Container fixed>            <Grid container style={{margin: '20px'}}>               <AddItemForm addItem={addTodolist}/>               <Grid container spacing={3}>                  {                     todolists.map(tl => {                        let tasksForTodolist = tasksObj[tl.id]                        if (tl.filter === 'active') {                           tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.New)                        }                        if (tl.filter === 'completed') {                           tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.Completed)                        }                        return (                           <Grid item>                              <Paper style={{padding: '15px'}}>                                 <Todolist                                    key={tl.id}                                    id={tl.id}                                    title={tl.title}                                    tasks={tasksForTodolist}                                    removeTodolist={removeTodolist}                                    removeTask={removeTask}                                    changeFilter={changeFilter}                                    addTask={addTask}                                    changeTaskStatus={changeTaskStatus}                                    changeTaskTitle={changeTaskTitle}                                    filter={tl.filter}                                    changeTodolistTitle={changeTodolistTitle}                                 />                              </Paper>                           </Grid>                        )                     })                  }               </Grid>            </Grid>         </Container>      </div>   )}
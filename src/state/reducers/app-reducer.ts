import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'import {authAPI} from '../../api/auth-api'import {setIsLoggedInAC} from './auth-reducer'import {handleServerAppError} from '../../utils/error-utils'import {ResponseCode} from './tasks-reducer'// thunksexport const initializeAppTC = createAsyncThunk('app/initializeApp', async (param, {dispatch}) => {   const response = await authAPI.me()   if (response.data.resultCode === ResponseCode.success) {      dispatch(setIsLoggedInAC({value: true}))   } else {      handleServerAppError(response.data, dispatch)   }})const slice = createSlice({   name: 'app',   initialState: {      status: 'idle' as RequestStatusType,      error: null as ErrorType,      isInitialized: false   } as InitialStateType,   reducers: {      setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {         state.status = action.payload.status      },      setAppErrorAC(state, action: PayloadAction<{ error: null | string }>) {         state.error = action.payload.error      }   },   extraReducers: builder => {      builder.addCase(initializeAppTC.fulfilled, (state) => {         state.isInitialized = true      })   }})export const appReducer = slice.reducerexport const {setAppStatusAC, setAppErrorAC} = slice.actions//// export const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {//    switch (action.type) {//       case ACTIONS_TYPE.SET_STATUS://          return {...state, status: action.status}//       case ACTIONS_TYPE.SET_ERROR://          return {...state, error: action.error}//       case ACTIONS_TYPE.SET_IS_INITIALIZED://          return {...state, isInitialized: action.isInitialized}//       default://          return state//    }// }// actions// export const setAppStatusAC = (status: RequestStatusType) => ({type: ACTIONS_TYPE.SET_STATUS, status} as const)// export const setAppErrorAC = (error: null | string) => ({type: ACTIONS_TYPE.SET_ERROR, error} as const)// export const setIsInitializedAC = (isInitialized: boolean) => ({//    type: ACTIONS_TYPE.SET_IS_INITIALIZED,//    isInitialized// } as const)// typesexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'export type ErrorType = string | nullexport type InitialStateType = {   status: RequestStatusType   error: ErrorType   isInitialized: boolean}
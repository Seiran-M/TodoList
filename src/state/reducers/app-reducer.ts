import {ACTIONS_TYPE} from './actions'import {Dispatch} from 'redux'import {authAPI} from '../../api/auth-api'import {ResponseCode, setIsLoggedInAC} from './auth-reducer'const initialState = {   status: 'idle' as RequestStatusType,   error: null as ErrorType,   isInitialized: false}export const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {   switch (action.type) {      case ACTIONS_TYPE.SET_STATUS:         return {...state, status: action.status}      case ACTIONS_TYPE.SET_ERROR:         return {...state, error: action.error}      case ACTIONS_TYPE.SET_IS_INITIALIZED:         return {...state, isInitialized: action.isInitialized}      default:         return state   }}// actionsexport const setAppStatusAC = (status: RequestStatusType) => ({type: ACTIONS_TYPE.SET_STATUS, status} as const)export const setAppErrorAC = (error: null | string) => ({type: ACTIONS_TYPE.SET_ERROR, error} as const)export const setIsInitializedAC = (isInitialized: boolean) => ({   type: ACTIONS_TYPE.SET_IS_INITIALIZED,   isInitialized} as const)// thunksexport const initializeAppTC = () => (dispatch: Dispatch) => {   authAPI.me()      .then(response => {         if (response.data.resultCode === ResponseCode.success) {            dispatch(setIsLoggedInAC(true))         } else {         }      })      .finally(() => dispatch(setIsInitializedAC(true)))}// typesexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'type ErrorType = string | nulltype InitialStateType = typeof initialStatetype ActionsType = ReturnType<typeof setAppStatusAC>   | ReturnType<typeof setAppErrorAC>   | ReturnType<typeof setIsInitializedAC>
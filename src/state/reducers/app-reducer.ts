import {Dispatch} from 'redux'import {authAPI} from '../../api/auth-api'import {ResponseCode, setIsLoggedInAC} from './auth-reducer'import {handleServerAppError} from '../../utils/error-utils'import {createSlice, PayloadAction} from '@reduxjs/toolkit'const initialState = {   status: 'idle' as RequestStatusType,   error: null as ErrorType,   isInitialized: false}const slice = createSlice({   name: 'app',   initialState: initialState,   reducers: {      setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {         state.status = action.payload.status      },      setAppErrorAC(state, action: PayloadAction<{ error: null | string }>) {         state.error = action.payload.error      },      setIsInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {         state.isInitialized = action.payload.isInitialized      }   }})export const appReducer = slice.reducerexport const {setAppStatusAC, setIsInitializedAC, setAppErrorAC} = slice.actions//// export const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {//    switch (action.type) {//       case ACTIONS_TYPE.SET_STATUS://          return {...state, status: action.status}//       case ACTIONS_TYPE.SET_ERROR://          return {...state, error: action.error}//       case ACTIONS_TYPE.SET_IS_INITIALIZED://          return {...state, isInitialized: action.isInitialized}//       default://          return state//    }// }// actions// export const setAppStatusAC = (status: RequestStatusType) => ({type: ACTIONS_TYPE.SET_STATUS, status} as const)// export const setAppErrorAC = (error: null | string) => ({type: ACTIONS_TYPE.SET_ERROR, error} as const)// export const setIsInitializedAC = (isInitialized: boolean) => ({//    type: ACTIONS_TYPE.SET_IS_INITIALIZED,//    isInitialized// } as const)// thunksexport const initializeAppTC = () => (dispatch: Dispatch) => {   authAPI.me()      .then(response => {         if (response.data.resultCode === ResponseCode.success) {            dispatch(setIsLoggedInAC({value: true}))         } else {            handleServerAppError(response.data, dispatch)         }      })      .finally(() => dispatch(setIsInitializedAC({isInitialized:true})))}// typesexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'type ErrorType = string | null
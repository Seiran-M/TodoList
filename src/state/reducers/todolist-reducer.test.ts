import {   addTodolistAC,   changeTodolistFilterAC,   changeTodolistTitleAC, removeTodolistAC,   setTodolistsAC,   TodolistDomainType,   todolistsReducer} from './todolists-reducer'import {v1} from 'uuid'export type FilterValuesType = 'all' | 'active' | 'completed'test('correct todolist should be removed', () => {   let todolistId1 = v1()   let todolistId2 = v1()   const startState: Array<TodolistDomainType> = [      {id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0, entityStatus: 'idle'},      {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 0, entityStatus: 'idle'}   ]   const endState = todolistsReducer(startState, removeTodolistAC({id:todolistId1}))   expect(endState.length).toBe(1)   expect(endState[0].id).toBe(todolistId2)   expect(endState === startState).toBeFalsy()})test('correct todolist should be added', () => {   let todolistId1 = v1()   let todolistId2 = v1()   let newTodolistTitle = 'New Todolist'   const startState: Array<TodolistDomainType> = [      {id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0, entityStatus: 'idle'},      {id: todolistId2, title: 'What to buy', filter: 'all',  addedDate: '', order: 0, entityStatus: 'idle'},   ]   const endState = todolistsReducer(startState, addTodolistAC(      {todolist: {id: todolistId1, title: newTodolistTitle, addedDate: '', order: 0}}   ))   expect(endState.length).toBe(3)   expect(endState[0].title).toBe(newTodolistTitle)   expect(endState === startState).toBeFalsy()})test('correct filter of todolist should be changed', () => {   let todolistId1 = v1()   let todolistId2 = v1()   let newFilter: FilterValuesType = 'completed'   const startState: Array<TodolistDomainType> = [      {id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0, entityStatus: 'idle'},      {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 0, entityStatus: 'idle'}   ]   const action = changeTodolistFilterAC({filter: newFilter, id: todolistId2})   // @ts-ignore   const endState = todolistsReducer(startState, action)   expect(endState[0].filter).toBe('all')   expect(endState[1].filter).toBe(newFilter)})test('correct todolist should change its name', () => {   let todolistId1 = v1()   let todolistId2 = v1()   let newTodolistTitle = 'New Todolist'   const startState: Array<TodolistDomainType> = [      {id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0, entityStatus: 'idle'},      {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 1, entityStatus: 'idle'}   ]   const action = changeTodolistTitleAC({id: todolistId2, title: newTodolistTitle})   const endState = todolistsReducer(startState, action)   expect(endState[0].title).toBe('What to learn')   expect(endState[1].title).toBe(newTodolistTitle)})test('todolists should be set to the state', () => {   let todolistId1 = v1()   let todolistId2 = v1()   const startState: Array<TodolistDomainType> = [      {id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0, entityStatus: 'idle'},      {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 1, entityStatus: 'idle'}   ]   const action = setTodolistsAC({todolists:startState})   const endState = todolistsReducer([], action)   expect(endState.length).toBe(2)})
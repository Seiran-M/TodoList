import {authAPI, LoginParamsType} from '../../api/auth-api'import {Dispatch} from 'redux'import {setAppErrorAC, setAppStatusAC} from './app-reducer'import {ACTIONS_TYPE} from './actions'import {AxiosError} from 'axios'import {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'// enumsexport enum ResponseCode {   success = 0,   failed = 1,   captcha = 10}export const initialState: AuthStateType = {   isLoggedIn: false}export const authReducer = (state: AuthStateType = initialState, action: ActionsType): AuthStateType => {   switch (action.type) {      case ACTIONS_TYPE.SET_IS_LOGGED_IN:         return {...state, isLoggedIn: action.value}      default:         return state   }}// actionsexport const setIsLoggedInAC = (value: boolean) =>   ({type: ACTIONS_TYPE.SET_IS_LOGGED_IN, value} as const)// thunksexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {   dispatch(setAppStatusAC('loading'))   authAPI.login(data)      .then(response => {         if (response.data.resultCode === ResponseCode.success) {            dispatch(setIsLoggedInAC(true))            dispatch(setAppStatusAC('succeeded'))         }         else {            handleServerAppError(response.data, dispatch)         }      })      .catch((error: AxiosError) => {         handleServerNetworkError(error.message, dispatch)      })}export const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {   dispatch(setAppStatusAC('loading'))   authAPI.logout()      .then(response => {         if (response.data.resultCode === ResponseCode.success) {            dispatch(setIsLoggedInAC(false))            dispatch(setAppStatusAC('succeeded'))         } else {            handleServerAppError(response.data, dispatch)         }      })      .catch((error) => {         handleServerNetworkError(error, dispatch)      })}// typesexport type AuthStateType = {   isLoggedIn:boolean,}type ActionsType =   ReturnType<typeof setIsLoggedInAC>   | ReturnType<typeof setAppStatusAC>   | ReturnType<typeof setAppErrorAC>
import {Dispatch} from 'redux'import {AxiosError} from 'axios'import {createSlice, PayloadAction} from '@reduxjs/toolkit'import {authAPI, LoginParamsType} from '../../api/auth-api'import {setAppStatusAC} from './app-reducer'import {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'// enumsexport enum ResponseCode {   success = 0,   failed = 1,   captcha = 10}export const initialState = {   isLoggedIn: false}const slice = createSlice({   name: 'auth',   initialState: initialState,   reducers: {      setIsLoggedInAC(state, action: PayloadAction<{value:boolean}>) {         state.isLoggedIn = action.payload.value      }   }})export const authReducer = slice.reducerexport const {setIsLoggedInAC} = slice.actions// export const authReducer = (state: AuthStateType = initialState, action: ActionsType): AuthStateType => {//    switch (action.type) {//       case ACTIONS_TYPE.SET_IS_LOGGED_IN://          return {...state, isLoggedIn: action.value}//       default://          return state//    }// }// actions// export const setIsLoggedInAC = (value: boolean) =>//    ({type: ACTIONS_TYPE.SET_IS_LOGGED_IN, value} as const)// thunksexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {   dispatch(setAppStatusAC({status:'loading'}))   authAPI.login(data)      .then(response => {         if (response.data.resultCode === ResponseCode.success) {            dispatch(setIsLoggedInAC({value: true}))            dispatch(setAppStatusAC({status:'succeeded'}))         } else {            handleServerAppError(response.data, dispatch)         }      })      .catch((error: AxiosError) => {         handleServerNetworkError(error.message, dispatch)      })}export const logoutTC = () => (dispatch: Dispatch) => {   dispatch(setAppStatusAC({status:'loading'}))   authAPI.logout()      .then(response => {         if (response.data.resultCode === ResponseCode.success) {            dispatch(setIsLoggedInAC({value: false}))            dispatch(setAppStatusAC({status:'succeeded'}))         } else {            handleServerAppError(response.data, dispatch)         }      })      .catch((error) => {         handleServerNetworkError(error, dispatch)      })}// types// export type AuthStateType = {//    isLoggedIn:boolean,// }// type ActionsType =//    ReturnType<typeof setIsLoggedInAC>//    | ReturnType<typeof setAppStatusAC>//    | ReturnType<typeof setAppErrorAC>
import {ACTIONS_TYPE} from './actions'import {Dispatch} from 'redux'import {todolistsAPI, TodolistType} from '../../api/todolists-api'import {TaskType} from '../../api/tasks-api'import {RequestStatusType, setAppErrorAC, setAppStatusAC} from './app-reducer'import {AxiosError} from 'axios'import {ResponseCode} from './tasks-reducer'import {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'const initialState: Array<TodolistDomainType> = []export const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {   switch (action.type) {      case ACTIONS_TYPE.SET_TODOLISTS:         return action.payload.todolists.map((tl) => ({...tl, entityStatus: 'idle', filter: 'all'}))      case ACTIONS_TYPE.REMOVE_TODOLIST:         return state.filter(tl => tl.id !== action.payload.id)      case ACTIONS_TYPE.ADD_TODOLIST:         return [{...action.payload.todolist, entityStatus: 'idle', filter: 'all'}, ...state]      case ACTIONS_TYPE.CHANGE_FILTER:         return state.map(tl => tl.id === action.payload.id ? {...tl, filter: action.payload.filter} : tl)      case ACTIONS_TYPE.CHANGE_TITLE:         return state.map(tl => tl.id === action.payload.id ? {...tl, title: action.payload.title} : tl)      case ACTIONS_TYPE.CHANGE_TODOLIST_ENTITY_STATUS:         return state.map(tl => tl.id === action.payload.id ? {...tl, entityStatus: action.payload.entityStatus} : tl)      default:         return state   }}// actionsexport const removeTodolistAC = (id: string) =>   ({type: ACTIONS_TYPE.REMOVE_TODOLIST, payload: {id}} as const)export const addTodolistAC = (todolist: TodolistType) =>   ({type: ACTIONS_TYPE.ADD_TODOLIST, payload: {todolist}} as const)export const changeTodolistFilterAC = (filter: FilterValuesType, id: string) =>   ({type: ACTIONS_TYPE.CHANGE_FILTER, payload: {filter, id}} as const)export const changeTodolistTitleAC = (id: string, title: string) =>   ({type: ACTIONS_TYPE.CHANGE_TITLE, payload: {id, title}} as const)export const setTodolistsAC = (todolists: Array<TodolistType>) =>   ({type: ACTIONS_TYPE.SET_TODOLISTS, payload: {todolists}} as const)export const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) =>   ({type: ACTIONS_TYPE.CHANGE_TODOLIST_ENTITY_STATUS, payload: {id, entityStatus}} as const)// thunksexport const fetchTodolistsTC = () => (dispatch: Dispatch<ActionsType>) => {   dispatch(setAppStatusAC('loading'))   todolistsAPI.getTodolists()      .then((res) => {         dispatch(setTodolistsAC(res.data))         dispatch(setAppStatusAC('succeeded'))      })      .catch((err: AxiosError) => {         handleServerNetworkError(err.message, dispatch)      })}export const addTodolistTC = (title: string) => (dispatch: Dispatch<ActionsType>) => {   dispatch(setAppStatusAC('loading'))   todolistsAPI.createTodolist(title)      .then(res => {         if (res.data.resultCode === ResponseCode.success) {            dispatch(addTodolistAC(res.data.data.item))            dispatch(setAppStatusAC('succeeded'))         } else {            handleServerAppError(res.data, dispatch)         }      })      .catch((err: AxiosError) => {         handleServerNetworkError(err.message, dispatch)      })}export const removeTodolistTC = (todolistsId: string) => (dispatch: Dispatch<ActionsType>) => {   dispatch(setAppStatusAC('loading'))   dispatch(changeTodolistEntityStatusAC(todolistsId, 'loading'))   todolistsAPI.deleteTodolist(todolistsId)      .then((res) => {         if (res.data.resultCode === ResponseCode.success) {            dispatch(removeTodolistAC(todolistsId))            dispatch(setAppStatusAC('succeeded'))         }      })      .catch((err: AxiosError) => {         handleServerNetworkError(err.message, dispatch)      })}export const changeTodolistTitleTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {   dispatch(setAppStatusAC('loading'))   todolistsAPI.updateTodolist(todolistId, title)      .then(() => {         dispatch(changeTodolistTitleAC(todolistId, title))         dispatch(setAppStatusAC('succeeded'))      })      .catch((err: AxiosError) => {         handleServerNetworkError(err.message, dispatch)      })}// typesexport type TasksStateType = { [key: string]: Array<TaskType> }export type FilterValuesType = 'all' | 'active' | 'completed'export type  ActionsType =   ReturnType<typeof removeTodolistAC>   | ReturnType<typeof addTodolistAC>   | ReturnType<typeof changeTodolistFilterAC>   | ReturnType<typeof changeTodolistTitleAC>   | ReturnType<typeof setTodolistsAC>   | ReturnType<typeof setAppStatusAC>   | ReturnType<typeof setAppErrorAC>   | ReturnType<typeof changeTodolistEntityStatusAC>export type TodolistDomainType = TodolistType & {   filter: FilterValuesType   entityStatus: RequestStatusType}
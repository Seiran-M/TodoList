import {Dispatch} from 'redux'import {AxiosError} from 'axios'import {todolistsAPI, TodolistType} from '../../api/todolists-api'import {TaskType} from '../../api/tasks-api'import {RequestStatusType, setAppStatusAC} from './app-reducer'import {ResponseCode} from './tasks-reducer'import {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'import {createSlice, PayloadAction} from '@reduxjs/toolkit'const initialState: Array<TodolistDomainType> = []const slice = createSlice({   name: 'todolists',   initialState,   reducers: {      removeTodolistAC(state, action: PayloadAction<{ id: string }>) {         const index = state.findIndex(tl => tl.id === action.payload.id)         if (index > 1) {            state.splice(index, 1)         }      },      addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {         state.unshift({...action.payload.todolist, entityStatus: 'idle', filter: 'all'})      },      changeTodolistFilterAC(state, action: PayloadAction<{ filter: FilterValuesType, id: string }>) {         const index = state.findIndex(tl => tl.id === action.payload.id)         state[index].filter = action.payload.filter      },      changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {         const index = state.findIndex(tl => tl.id === action.payload.id)         state[index].title = action.payload.title      },      setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {         return action.payload.todolists.map((tl:TodolistType) => ({...tl, entityStatus: 'idle', filter: 'all'}))      },      changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, entityStatus: RequestStatusType }>) {         const index = state.findIndex(tl => tl.id ===action.payload.id)         state[index].entityStatus = action.payload.entityStatus      },   }})export const todolistsReducer = slice.reducerexport const {   removeTodolistAC, changeTodolistEntityStatusAC, addTodolistAC, setTodolistsAC,   changeTodolistFilterAC, changeTodolistTitleAC} = slice.actions// thunksexport const fetchTodolistsTC = () => (dispatch: Dispatch) => {   dispatch(setAppStatusAC({status: 'loading'}))   todolistsAPI.getTodolists()      .then((response) => {         dispatch(setTodolistsAC({todolists: response.data}))         dispatch(setAppStatusAC({status: 'succeeded'}))      })      .catch((error: AxiosError) => {         handleServerNetworkError(error.message, dispatch)      })}export const addTodolistTC = (title: string) => (dispatch: Dispatch) => {   dispatch(setAppStatusAC({status: 'loading'}))   todolistsAPI.createTodolist(title)      .then(response => {         if (response.data.resultCode === ResponseCode.success) {            dispatch(addTodolistAC({todolist: response.data.data.item}))            dispatch(setAppStatusAC({status: 'succeeded'}))         } else {            handleServerAppError(response.data, dispatch)         }      })      .catch((error: AxiosError) => {         handleServerNetworkError(error.message, dispatch)      })}export const removeTodolistTC = (todolistsId: string) => (dispatch: Dispatch) => {   dispatch(setAppStatusAC({status: 'loading'}))   dispatch(changeTodolistEntityStatusAC({id: todolistsId, entityStatus: 'loading'}))   todolistsAPI.deleteTodolist(todolistsId)      .then((response) => {         if (response.data.resultCode === ResponseCode.success) {            dispatch(removeTodolistAC({id: todolistsId}))            dispatch(setAppStatusAC({status: 'succeeded'}))         }      })      .catch((error: AxiosError) => {         handleServerNetworkError(error.message, dispatch)      })}export const changeTodolistTitleTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {   dispatch(setAppStatusAC({status: 'loading'}))   todolistsAPI.updateTodolist(todolistId, title)      .then(() => {         dispatch(changeTodolistTitleAC({id: todolistId, title}))         dispatch(setAppStatusAC({status: 'succeeded'}))      })      .catch((error: AxiosError) => {         handleServerNetworkError(error.message, dispatch)      })}// typesexport type TasksStateType = { [key: string]: Array<TaskType> }export type FilterValuesType = 'all' | 'active' | 'completed'export type TodolistDomainType = TodolistType & {   filter: FilterValuesType   entityStatus: RequestStatusType}